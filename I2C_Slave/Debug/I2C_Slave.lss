
I2C_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000034ca  0000355e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000114  00800076  00800076  00003574  2**0
                  ALLOC
  3 .stab         00002274  00000000  00000000  00003574  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f1d  00000000  00000000  000057e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006705  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006865  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000069f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000aabc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000ac3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000aefe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b78c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dd 14 	call	0x29ba	; 0x29ba <main>
      8a:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e6       	ldi	r26, 0x65	; 101
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	85 e6       	ldi	r24, 0x65	; 101
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e6       	ldi	r22, 0x65	; 101
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 81 17 	jmp	0x2f02	; 0x2f02 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_SetPinValue>:



//PIN FUNCTIONS
void DIO_SetPinValue(u8 DIO_Port_ID, u8 DIO_Pin_Num, u8 DIO_Pin_Value)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	2d 97       	sbiw	r28, 0x0d	; 13
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	6a 83       	std	Y+2, r22	; 0x02
     cb6:	4b 83       	std	Y+3, r20	; 0x03
	switch(DIO_Port_ID)
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	3d 87       	std	Y+13, r19	; 0x0d
     cc0:	2c 87       	std	Y+12, r18	; 0x0c
     cc2:	8c 85       	ldd	r24, Y+12	; 0x0c
     cc4:	9d 85       	ldd	r25, Y+13	; 0x0d
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	91 05       	cpc	r25, r1
     cca:	09 f4       	brne	.+2      	; 0xcce <DIO_SetPinValue+0x30>
     ccc:	44 c0       	rjmp	.+136    	; 0xd56 <DIO_SetPinValue+0xb8>
     cce:	2c 85       	ldd	r18, Y+12	; 0x0c
     cd0:	3d 85       	ldd	r19, Y+13	; 0x0d
     cd2:	22 30       	cpi	r18, 0x02	; 2
     cd4:	31 05       	cpc	r19, r1
     cd6:	2c f4       	brge	.+10     	; 0xce2 <DIO_SetPinValue+0x44>
     cd8:	8c 85       	ldd	r24, Y+12	; 0x0c
     cda:	9d 85       	ldd	r25, Y+13	; 0x0d
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	71 f0       	breq	.+28     	; 0xcfc <DIO_SetPinValue+0x5e>
     ce0:	c2 c0       	rjmp	.+388    	; 0xe66 <DIO_SetPinValue+0x1c8>
     ce2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ce4:	3d 85       	ldd	r19, Y+13	; 0x0d
     ce6:	22 30       	cpi	r18, 0x02	; 2
     ce8:	31 05       	cpc	r19, r1
     cea:	09 f4       	brne	.+2      	; 0xcee <DIO_SetPinValue+0x50>
     cec:	62 c0       	rjmp	.+196    	; 0xdb2 <DIO_SetPinValue+0x114>
     cee:	8c 85       	ldd	r24, Y+12	; 0x0c
     cf0:	9d 85       	ldd	r25, Y+13	; 0x0d
     cf2:	83 30       	cpi	r24, 0x03	; 3
     cf4:	91 05       	cpc	r25, r1
     cf6:	09 f4       	brne	.+2      	; 0xcfa <DIO_SetPinValue+0x5c>
     cf8:	89 c0       	rjmp	.+274    	; 0xe0c <DIO_SetPinValue+0x16e>
     cfa:	b5 c0       	rjmp	.+362    	; 0xe66 <DIO_SetPinValue+0x1c8>
	{
		case PORT_A:
			DIO_Pin_Value ? SET_BIT(PORTA,DIO_Pin_Num) : CLEAR_BIT(PORTA,DIO_Pin_Num);
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	88 23       	and	r24, r24
     d00:	a9 f0       	breq	.+42     	; 0xd2c <DIO_SetPinValue+0x8e>
     d02:	ab e3       	ldi	r26, 0x3B	; 59
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	eb e3       	ldi	r30, 0x3B	; 59
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_SetPinValue+0x82>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_SetPinValue+0x7e>
     d24:	84 2b       	or	r24, r20
     d26:	8c 93       	st	X, r24
     d28:	9c 91       	ld	r25, X
     d2a:	9d c0       	rjmp	.+314    	; 0xe66 <DIO_SetPinValue+0x1c8>
     d2c:	ab e3       	ldi	r26, 0x3B	; 59
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	eb e3       	ldi	r30, 0x3B	; 59
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_SetPinValue+0xaa>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	2a 95       	dec	r18
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_SetPinValue+0xa6>
     d4c:	80 95       	com	r24
     d4e:	84 23       	and	r24, r20
     d50:	8c 93       	st	X, r24
     d52:	2c 91       	ld	r18, X
     d54:	88 c0       	rjmp	.+272    	; 0xe66 <DIO_SetPinValue+0x1c8>
			break;
		case PORT_B:
			DIO_Pin_Value ? SET_BIT(PORTB,DIO_Pin_Num) : CLEAR_BIT(PORTB,DIO_Pin_Num);
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	88 23       	and	r24, r24
     d5a:	a9 f0       	breq	.+42     	; 0xd86 <DIO_SetPinValue+0xe8>
     d5c:	a8 e3       	ldi	r26, 0x38	; 56
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e8 e3       	ldi	r30, 0x38	; 56
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	48 2f       	mov	r20, r24
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	02 2e       	mov	r0, r18
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <DIO_SetPinValue+0xdc>
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <DIO_SetPinValue+0xd8>
     d7e:	84 2b       	or	r24, r20
     d80:	8c 93       	st	X, r24
     d82:	3c 91       	ld	r19, X
     d84:	70 c0       	rjmp	.+224    	; 0xe66 <DIO_SetPinValue+0x1c8>
     d86:	a8 e3       	ldi	r26, 0x38	; 56
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e8 e3       	ldi	r30, 0x38	; 56
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_SetPinValue+0x106>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_SetPinValue+0x102>
     da8:	80 95       	com	r24
     daa:	84 23       	and	r24, r20
     dac:	8c 93       	st	X, r24
     dae:	8c 91       	ld	r24, X
     db0:	5a c0       	rjmp	.+180    	; 0xe66 <DIO_SetPinValue+0x1c8>
			break;
		case PORT_C:
			DIO_Pin_Value ? SET_BIT(PORTC,DIO_Pin_Num) : CLEAR_BIT(PORTC,DIO_Pin_Num);
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	88 23       	and	r24, r24
     db6:	a9 f0       	breq	.+42     	; 0xde2 <DIO_SetPinValue+0x144>
     db8:	a5 e3       	ldi	r26, 0x35	; 53
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e5 e3       	ldi	r30, 0x35	; 53
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	48 2f       	mov	r20, r24
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 2e       	mov	r0, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <DIO_SetPinValue+0x138>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	0a 94       	dec	r0
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <DIO_SetPinValue+0x134>
     dda:	84 2b       	or	r24, r20
     ddc:	8c 93       	st	X, r24
     dde:	9c 91       	ld	r25, X
     de0:	42 c0       	rjmp	.+132    	; 0xe66 <DIO_SetPinValue+0x1c8>
     de2:	a5 e3       	ldi	r26, 0x35	; 53
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e5 e3       	ldi	r30, 0x35	; 53
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <DIO_SetPinValue+0x160>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	2a 95       	dec	r18
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <DIO_SetPinValue+0x15c>
     e02:	80 95       	com	r24
     e04:	84 23       	and	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	2c 91       	ld	r18, X
     e0a:	2d c0       	rjmp	.+90     	; 0xe66 <DIO_SetPinValue+0x1c8>
			break;
		case PORT_D:
			DIO_Pin_Value ? SET_BIT(PORTD,DIO_Pin_Num) : CLEAR_BIT(PORTD,DIO_Pin_Num);
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	88 23       	and	r24, r24
     e10:	a9 f0       	breq	.+42     	; 0xe3c <DIO_SetPinValue+0x19e>
     e12:	a2 e3       	ldi	r26, 0x32	; 50
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e2 e3       	ldi	r30, 0x32	; 50
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <DIO_SetPinValue+0x192>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <DIO_SetPinValue+0x18e>
     e34:	84 2b       	or	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	3c 91       	ld	r19, X
     e3a:	15 c0       	rjmp	.+42     	; 0xe66 <DIO_SetPinValue+0x1c8>
     e3c:	a2 e3       	ldi	r26, 0x32	; 50
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e2 e3       	ldi	r30, 0x32	; 50
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_SetPinValue+0x1bc>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_SetPinValue+0x1b8>
     e5e:	80 95       	com	r24
     e60:	84 23       	and	r24, r20
     e62:	8c 93       	st	X, r24
     e64:	8c 91       	ld	r24, X
			break;
		default:
			break;
	}
}
     e66:	2d 96       	adiw	r28, 0x0d	; 13
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <DIO_SetInternalPullUp>:



void DIO_SetInternalPullUp(u8 DIO_Port_ID, u8 DIO_Pin_Num)
{
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <DIO_SetInternalPullUp+0x6>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <DIO_SetInternalPullUp+0x8>
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	6a 83       	std	Y+2, r22	; 0x02
	//TODO check pin direction

	switch(DIO_Port_ID)
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	3c 83       	std	Y+4, r19	; 0x04
     e90:	2b 83       	std	Y+3, r18	; 0x03
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	9c 81       	ldd	r25, Y+4	; 0x04
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	91 05       	cpc	r25, r1
     e9a:	49 f1       	breq	.+82     	; 0xeee <DIO_SetInternalPullUp+0x76>
     e9c:	2b 81       	ldd	r18, Y+3	; 0x03
     e9e:	3c 81       	ldd	r19, Y+4	; 0x04
     ea0:	22 30       	cpi	r18, 0x02	; 2
     ea2:	31 05       	cpc	r19, r1
     ea4:	2c f4       	brge	.+10     	; 0xeb0 <DIO_SetInternalPullUp+0x38>
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	9c 81       	ldd	r25, Y+4	; 0x04
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	61 f0       	breq	.+24     	; 0xec6 <DIO_SetInternalPullUp+0x4e>
     eae:	5a c0       	rjmp	.+180    	; 0xf64 <DIO_SetInternalPullUp+0xec>
     eb0:	2b 81       	ldd	r18, Y+3	; 0x03
     eb2:	3c 81       	ldd	r19, Y+4	; 0x04
     eb4:	22 30       	cpi	r18, 0x02	; 2
     eb6:	31 05       	cpc	r19, r1
     eb8:	71 f1       	breq	.+92     	; 0xf16 <DIO_SetInternalPullUp+0x9e>
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	9c 81       	ldd	r25, Y+4	; 0x04
     ebe:	83 30       	cpi	r24, 0x03	; 3
     ec0:	91 05       	cpc	r25, r1
     ec2:	e9 f1       	breq	.+122    	; 0xf3e <DIO_SetInternalPullUp+0xc6>
     ec4:	4f c0       	rjmp	.+158    	; 0xf64 <DIO_SetInternalPullUp+0xec>
	{
		case PORT_A:
			SET_BIT(PORTA,DIO_Pin_Num);
     ec6:	ab e3       	ldi	r26, 0x3B	; 59
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	eb e3       	ldi	r30, 0x3B	; 59
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 2e       	mov	r0, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_SetInternalPullUp+0x6c>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_SetInternalPullUp+0x68>
     ee8:	84 2b       	or	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	3b c0       	rjmp	.+118    	; 0xf64 <DIO_SetInternalPullUp+0xec>
			break;
		case PORT_B:
			SET_BIT(PORTB,DIO_Pin_Num);
     eee:	a8 e3       	ldi	r26, 0x38	; 56
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e8 e3       	ldi	r30, 0x38	; 56
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_SetInternalPullUp+0x94>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_SetInternalPullUp+0x90>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	27 c0       	rjmp	.+78     	; 0xf64 <DIO_SetInternalPullUp+0xec>
			break;
		case PORT_C:
			SET_BIT(PORTC,DIO_Pin_Num);
     f16:	a5 e3       	ldi	r26, 0x35	; 53
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e5 e3       	ldi	r30, 0x35	; 53
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_SetInternalPullUp+0xbc>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_SetInternalPullUp+0xb8>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	13 c0       	rjmp	.+38     	; 0xf64 <DIO_SetInternalPullUp+0xec>
			break;
		case PORT_D:
			SET_BIT(PORTD,DIO_Pin_Num);
     f3e:	a2 e3       	ldi	r26, 0x32	; 50
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e2 e3       	ldi	r30, 0x32	; 50
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_SetInternalPullUp+0xe4>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_SetInternalPullUp+0xe0>
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24
			break;
		default:
			break;
	}

}
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 DIO_Port_ID, u8 DIO_Pin_Num)
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	00 d0       	rcall	.+0      	; 0xf78 <DIO_GetPinValue+0x6>
     f78:	00 d0       	rcall	.+0      	; 0xf7a <DIO_GetPinValue+0x8>
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <DIO_GetPinValue+0xa>
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	6a 83       	std	Y+2, r22	; 0x02

	switch(DIO_Port_ID)
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	3d 83       	std	Y+5, r19	; 0x05
     f8c:	2c 83       	std	Y+4, r18	; 0x04
     f8e:	4c 81       	ldd	r20, Y+4	; 0x04
     f90:	5d 81       	ldd	r21, Y+5	; 0x05
     f92:	41 30       	cpi	r20, 0x01	; 1
     f94:	51 05       	cpc	r21, r1
     f96:	49 f1       	breq	.+82     	; 0xfea <DIO_GetPinValue+0x78>
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	9d 81       	ldd	r25, Y+5	; 0x05
     f9c:	82 30       	cpi	r24, 0x02	; 2
     f9e:	91 05       	cpc	r25, r1
     fa0:	34 f4       	brge	.+12     	; 0xfae <DIO_GetPinValue+0x3c>
     fa2:	2c 81       	ldd	r18, Y+4	; 0x04
     fa4:	3d 81       	ldd	r19, Y+5	; 0x05
     fa6:	21 15       	cp	r18, r1
     fa8:	31 05       	cpc	r19, r1
     faa:	61 f0       	breq	.+24     	; 0xfc4 <DIO_GetPinValue+0x52>
     fac:	57 c0       	rjmp	.+174    	; 0x105c <DIO_GetPinValue+0xea>
     fae:	4c 81       	ldd	r20, Y+4	; 0x04
     fb0:	5d 81       	ldd	r21, Y+5	; 0x05
     fb2:	42 30       	cpi	r20, 0x02	; 2
     fb4:	51 05       	cpc	r21, r1
     fb6:	61 f1       	breq	.+88     	; 0x1010 <DIO_GetPinValue+0x9e>
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	9d 81       	ldd	r25, Y+5	; 0x05
     fbc:	83 30       	cpi	r24, 0x03	; 3
     fbe:	91 05       	cpc	r25, r1
     fc0:	d1 f1       	breq	.+116    	; 0x1036 <DIO_GetPinValue+0xc4>
     fc2:	4c c0       	rjmp	.+152    	; 0x105c <DIO_GetPinValue+0xea>
	{
		case PORT_A:
			return GET_BIT(PINA,DIO_Pin_Num);
     fc4:	e9 e3       	ldi	r30, 0x39	; 57
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	88 2f       	mov	r24, r24
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a9 01       	movw	r20, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_GetPinValue+0x6a>
     fd8:	55 95       	asr	r21
     fda:	47 95       	ror	r20
     fdc:	8a 95       	dec	r24
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_GetPinValue+0x66>
     fe0:	ca 01       	movw	r24, r20
     fe2:	58 2f       	mov	r21, r24
     fe4:	51 70       	andi	r21, 0x01	; 1
     fe6:	5b 83       	std	Y+3, r21	; 0x03
     fe8:	3a c0       	rjmp	.+116    	; 0x105e <DIO_GetPinValue+0xec>
			break;
		case PORT_B:
			return GET_BIT(PINB,DIO_Pin_Num);
     fea:	e6 e3       	ldi	r30, 0x36	; 54
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	88 2f       	mov	r24, r24
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	a9 01       	movw	r20, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_GetPinValue+0x90>
     ffe:	55 95       	asr	r21
    1000:	47 95       	ror	r20
    1002:	8a 95       	dec	r24
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_GetPinValue+0x8c>
    1006:	ca 01       	movw	r24, r20
    1008:	58 2f       	mov	r21, r24
    100a:	51 70       	andi	r21, 0x01	; 1
    100c:	5b 83       	std	Y+3, r21	; 0x03
    100e:	27 c0       	rjmp	.+78     	; 0x105e <DIO_GetPinValue+0xec>
			break;
		case PORT_C:
			return GET_BIT(PINC,DIO_Pin_Num);
    1010:	e3 e3       	ldi	r30, 0x33	; 51
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	a9 01       	movw	r20, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_GetPinValue+0xb6>
    1024:	55 95       	asr	r21
    1026:	47 95       	ror	r20
    1028:	8a 95       	dec	r24
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_GetPinValue+0xb2>
    102c:	ca 01       	movw	r24, r20
    102e:	58 2f       	mov	r21, r24
    1030:	51 70       	andi	r21, 0x01	; 1
    1032:	5b 83       	std	Y+3, r21	; 0x03
    1034:	14 c0       	rjmp	.+40     	; 0x105e <DIO_GetPinValue+0xec>
			break;
		case PORT_D:
			return GET_BIT(PIND,DIO_Pin_Num);
    1036:	e0 e3       	ldi	r30, 0x30	; 48
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	a9 01       	movw	r20, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_GetPinValue+0xdc>
    104a:	55 95       	asr	r21
    104c:	47 95       	ror	r20
    104e:	8a 95       	dec	r24
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_GetPinValue+0xd8>
    1052:	ca 01       	movw	r24, r20
    1054:	58 2f       	mov	r21, r24
    1056:	51 70       	andi	r21, 0x01	; 1
    1058:	5b 83       	std	Y+3, r21	; 0x03
    105a:	01 c0       	rjmp	.+2      	; 0x105e <DIO_GetPinValue+0xec>
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_GetPinValue+0xf0>
			break;
		default:
			break;
	}

}
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	8e 83       	std	Y+6, r24	; 0x06
    1062:	8e 81       	ldd	r24, Y+6	; 0x06
    1064:	26 96       	adiw	r28, 0x06	; 6
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <DIO_SetPinDirection>:


void DIO_SetPinDirection(u8 DIO_Port_ID, u8 DIO_Pin_Num, u8 DIO_Pin_Direction)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	2d 97       	sbiw	r28, 0x0d	; 13
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	6a 83       	std	Y+2, r22	; 0x02
    108e:	4b 83       	std	Y+3, r20	; 0x03
	switch(DIO_Port_ID)
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	3d 87       	std	Y+13, r19	; 0x0d
    1098:	2c 87       	std	Y+12, r18	; 0x0c
    109a:	8c 85       	ldd	r24, Y+12	; 0x0c
    109c:	9d 85       	ldd	r25, Y+13	; 0x0d
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	91 05       	cpc	r25, r1
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <DIO_SetPinDirection+0x30>
    10a4:	44 c0       	rjmp	.+136    	; 0x112e <DIO_SetPinDirection+0xb8>
    10a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    10a8:	3d 85       	ldd	r19, Y+13	; 0x0d
    10aa:	22 30       	cpi	r18, 0x02	; 2
    10ac:	31 05       	cpc	r19, r1
    10ae:	2c f4       	brge	.+10     	; 0x10ba <DIO_SetPinDirection+0x44>
    10b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    10b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	71 f0       	breq	.+28     	; 0x10d4 <DIO_SetPinDirection+0x5e>
    10b8:	c2 c0       	rjmp	.+388    	; 0x123e <DIO_SetPinDirection+0x1c8>
    10ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    10bc:	3d 85       	ldd	r19, Y+13	; 0x0d
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	31 05       	cpc	r19, r1
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <DIO_SetPinDirection+0x50>
    10c4:	62 c0       	rjmp	.+196    	; 0x118a <DIO_SetPinDirection+0x114>
    10c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    10c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    10ca:	83 30       	cpi	r24, 0x03	; 3
    10cc:	91 05       	cpc	r25, r1
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <DIO_SetPinDirection+0x5c>
    10d0:	89 c0       	rjmp	.+274    	; 0x11e4 <DIO_SetPinDirection+0x16e>
    10d2:	b5 c0       	rjmp	.+362    	; 0x123e <DIO_SetPinDirection+0x1c8>
	{
		case PORT_A:
			DIO_Pin_Direction ? SET_BIT(DDRA,DIO_Pin_Num) : CLEAR_BIT(DDRA,DIO_Pin_Num);
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	88 23       	and	r24, r24
    10d8:	a9 f0       	breq	.+42     	; 0x1104 <DIO_SetPinDirection+0x8e>
    10da:	aa e3       	ldi	r26, 0x3A	; 58
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	ea e3       	ldi	r30, 0x3A	; 58
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 2e       	mov	r0, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_SetPinDirection+0x82>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	0a 94       	dec	r0
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_SetPinDirection+0x7e>
    10fc:	84 2b       	or	r24, r20
    10fe:	8c 93       	st	X, r24
    1100:	9c 91       	ld	r25, X
    1102:	9d c0       	rjmp	.+314    	; 0x123e <DIO_SetPinDirection+0x1c8>
    1104:	aa e3       	ldi	r26, 0x3A	; 58
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	ea e3       	ldi	r30, 0x3A	; 58
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_SetPinDirection+0xaa>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	2a 95       	dec	r18
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_SetPinDirection+0xa6>
    1124:	80 95       	com	r24
    1126:	84 23       	and	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	2c 91       	ld	r18, X
    112c:	88 c0       	rjmp	.+272    	; 0x123e <DIO_SetPinDirection+0x1c8>
			break;
		case PORT_B:
			DIO_Pin_Direction ? SET_BIT(DDRB,DIO_Pin_Num) : CLEAR_BIT(DDRB,DIO_Pin_Num);
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	88 23       	and	r24, r24
    1132:	a9 f0       	breq	.+42     	; 0x115e <DIO_SetPinDirection+0xe8>
    1134:	a7 e3       	ldi	r26, 0x37	; 55
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e7 e3       	ldi	r30, 0x37	; 55
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_SetPinDirection+0xdc>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_SetPinDirection+0xd8>
    1156:	84 2b       	or	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	3c 91       	ld	r19, X
    115c:	70 c0       	rjmp	.+224    	; 0x123e <DIO_SetPinDirection+0x1c8>
    115e:	a7 e3       	ldi	r26, 0x37	; 55
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e7 e3       	ldi	r30, 0x37	; 55
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <DIO_SetPinDirection+0x106>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <DIO_SetPinDirection+0x102>
    1180:	80 95       	com	r24
    1182:	84 23       	and	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	8c 91       	ld	r24, X
    1188:	5a c0       	rjmp	.+180    	; 0x123e <DIO_SetPinDirection+0x1c8>
			break;
		case PORT_C:
			DIO_Pin_Direction ? SET_BIT(DDRC,DIO_Pin_Num) : CLEAR_BIT(DDRC,DIO_Pin_Num);
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	88 23       	and	r24, r24
    118e:	a9 f0       	breq	.+42     	; 0x11ba <DIO_SetPinDirection+0x144>
    1190:	a4 e3       	ldi	r26, 0x34	; 52
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e4 e3       	ldi	r30, 0x34	; 52
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_SetPinDirection+0x138>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_SetPinDirection+0x134>
    11b2:	84 2b       	or	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	9c 91       	ld	r25, X
    11b8:	42 c0       	rjmp	.+132    	; 0x123e <DIO_SetPinDirection+0x1c8>
    11ba:	a4 e3       	ldi	r26, 0x34	; 52
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e4 e3       	ldi	r30, 0x34	; 52
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_SetPinDirection+0x160>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	2a 95       	dec	r18
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_SetPinDirection+0x15c>
    11da:	80 95       	com	r24
    11dc:	84 23       	and	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	2c 91       	ld	r18, X
    11e2:	2d c0       	rjmp	.+90     	; 0x123e <DIO_SetPinDirection+0x1c8>
			break;
		case PORT_D:
			DIO_Pin_Direction ? SET_BIT(DDRD,DIO_Pin_Num) : CLEAR_BIT(DDRD,DIO_Pin_Num);
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	88 23       	and	r24, r24
    11e8:	a9 f0       	breq	.+42     	; 0x1214 <DIO_SetPinDirection+0x19e>
    11ea:	a1 e3       	ldi	r26, 0x31	; 49
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e1 e3       	ldi	r30, 0x31	; 49
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 2e       	mov	r0, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <DIO_SetPinDirection+0x192>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	0a 94       	dec	r0
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <DIO_SetPinDirection+0x18e>
    120c:	84 2b       	or	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	3c 91       	ld	r19, X
    1212:	15 c0       	rjmp	.+42     	; 0x123e <DIO_SetPinDirection+0x1c8>
    1214:	a1 e3       	ldi	r26, 0x31	; 49
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e1 e3       	ldi	r30, 0x31	; 49
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 2e       	mov	r0, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <DIO_SetPinDirection+0x1bc>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	0a 94       	dec	r0
    1234:	e2 f7       	brpl	.-8      	; 0x122e <DIO_SetPinDirection+0x1b8>
    1236:	80 95       	com	r24
    1238:	84 23       	and	r24, r20
    123a:	8c 93       	st	X, r24
    123c:	8c 91       	ld	r24, X
			break;
		default:
			break;
	}
}
    123e:	2d 96       	adiw	r28, 0x0d	; 13
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <DIO_SetPortValue>:

//PORT FUNCTIONS
void DIO_SetPortValue(u8 DIO_Port_ID, u8 DIO_Port_Value)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <DIO_SetPortValue+0x6>
    1256:	00 d0       	rcall	.+0      	; 0x1258 <DIO_SetPortValue+0x8>
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	6a 83       	std	Y+2, r22	; 0x02
	switch(DIO_Port_ID)
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	3c 83       	std	Y+4, r19	; 0x04
    1268:	2b 83       	std	Y+3, r18	; 0x03
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	91 05       	cpc	r25, r1
    1272:	d1 f0       	breq	.+52     	; 0x12a8 <DIO_SetPortValue+0x58>
    1274:	2b 81       	ldd	r18, Y+3	; 0x03
    1276:	3c 81       	ldd	r19, Y+4	; 0x04
    1278:	22 30       	cpi	r18, 0x02	; 2
    127a:	31 05       	cpc	r19, r1
    127c:	2c f4       	brge	.+10     	; 0x1288 <DIO_SetPortValue+0x38>
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	61 f0       	breq	.+24     	; 0x129e <DIO_SetPortValue+0x4e>
    1286:	1e c0       	rjmp	.+60     	; 0x12c4 <DIO_SetPortValue+0x74>
    1288:	2b 81       	ldd	r18, Y+3	; 0x03
    128a:	3c 81       	ldd	r19, Y+4	; 0x04
    128c:	22 30       	cpi	r18, 0x02	; 2
    128e:	31 05       	cpc	r19, r1
    1290:	81 f0       	breq	.+32     	; 0x12b2 <DIO_SetPortValue+0x62>
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	83 30       	cpi	r24, 0x03	; 3
    1298:	91 05       	cpc	r25, r1
    129a:	81 f0       	breq	.+32     	; 0x12bc <DIO_SetPortValue+0x6c>
    129c:	13 c0       	rjmp	.+38     	; 0x12c4 <DIO_SetPortValue+0x74>
	{
		case PORT_A:
			PORTA = DIO_Port_Value;
    129e:	eb e3       	ldi	r30, 0x3B	; 59
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	80 83       	st	Z, r24
    12a6:	0e c0       	rjmp	.+28     	; 0x12c4 <DIO_SetPortValue+0x74>
			break;
		case PORT_B:
			PORTB = DIO_Port_Value;
    12a8:	e8 e3       	ldi	r30, 0x38	; 56
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	80 83       	st	Z, r24
    12b0:	09 c0       	rjmp	.+18     	; 0x12c4 <DIO_SetPortValue+0x74>
			break;
		case PORT_C:
			PORTC = DIO_Port_Value;
    12b2:	e5 e3       	ldi	r30, 0x35	; 53
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	80 83       	st	Z, r24
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <DIO_SetPortValue+0x74>
			break;
		case PORT_D:
			PORTD = DIO_Port_Value;
    12bc:	e2 e3       	ldi	r30, 0x32	; 50
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <DIO_GetPortValue>:


u8 DIO_GetPortValue(u8 DIO_Port_ID)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <DIO_GetPortValue+0x6>
    12d8:	00 d0       	rcall	.+0      	; 0x12da <DIO_GetPortValue+0x8>
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	89 83       	std	Y+1, r24	; 0x01
	switch(DIO_Port_ID)
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	3c 83       	std	Y+4, r19	; 0x04
    12ea:	2b 83       	std	Y+3, r18	; 0x03
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	91 05       	cpc	r25, r1
    12f4:	d1 f0       	breq	.+52     	; 0x132a <DIO_GetPortValue+0x58>
    12f6:	2b 81       	ldd	r18, Y+3	; 0x03
    12f8:	3c 81       	ldd	r19, Y+4	; 0x04
    12fa:	22 30       	cpi	r18, 0x02	; 2
    12fc:	31 05       	cpc	r19, r1
    12fe:	2c f4       	brge	.+10     	; 0x130a <DIO_GetPortValue+0x38>
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	9c 81       	ldd	r25, Y+4	; 0x04
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	61 f0       	breq	.+24     	; 0x1320 <DIO_GetPortValue+0x4e>
    1308:	1f c0       	rjmp	.+62     	; 0x1348 <DIO_GetPortValue+0x76>
    130a:	2b 81       	ldd	r18, Y+3	; 0x03
    130c:	3c 81       	ldd	r19, Y+4	; 0x04
    130e:	22 30       	cpi	r18, 0x02	; 2
    1310:	31 05       	cpc	r19, r1
    1312:	81 f0       	breq	.+32     	; 0x1334 <DIO_GetPortValue+0x62>
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	83 30       	cpi	r24, 0x03	; 3
    131a:	91 05       	cpc	r25, r1
    131c:	81 f0       	breq	.+32     	; 0x133e <DIO_GetPortValue+0x6c>
    131e:	14 c0       	rjmp	.+40     	; 0x1348 <DIO_GetPortValue+0x76>
	{
		case PORT_A:
			return PORTA;
    1320:	eb e3       	ldi	r30, 0x3B	; 59
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	90 81       	ld	r25, Z
    1326:	9a 83       	std	Y+2, r25	; 0x02
    1328:	10 c0       	rjmp	.+32     	; 0x134a <DIO_GetPortValue+0x78>
			break;
		case PORT_B:
			return PORTB;
    132a:	e8 e3       	ldi	r30, 0x38	; 56
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	20 81       	ld	r18, Z
    1330:	2a 83       	std	Y+2, r18	; 0x02
    1332:	0b c0       	rjmp	.+22     	; 0x134a <DIO_GetPortValue+0x78>
			break;
		case PORT_C:
			return PORTC;
    1334:	e5 e3       	ldi	r30, 0x35	; 53
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	30 81       	ld	r19, Z
    133a:	3a 83       	std	Y+2, r19	; 0x02
    133c:	06 c0       	rjmp	.+12     	; 0x134a <DIO_GetPortValue+0x78>
			break;
		case PORT_D:
			return PORTD;
    133e:	e2 e3       	ldi	r30, 0x32	; 50
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	8a 83       	std	Y+2, r24	; 0x02
    1346:	01 c0       	rjmp	.+2      	; 0x134a <DIO_GetPortValue+0x78>
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_GetPortValue+0x7c>
			break;
		default:
			break;
	}
}
    134a:	9a 81       	ldd	r25, Y+2	; 0x02
    134c:	9d 83       	std	Y+5, r25	; 0x05
    134e:	8d 81       	ldd	r24, Y+5	; 0x05
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <DIO_SetPortDirection>:


void DIO_SetPortDirection(u8 DIO_Port_ID, u8 DIO_Port_Direction)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <DIO_SetPortDirection+0x6>
    1366:	00 d0       	rcall	.+0      	; 0x1368 <DIO_SetPortDirection+0x8>
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	6a 83       	std	Y+2, r22	; 0x02
	switch(DIO_Port_ID)
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	3c 83       	std	Y+4, r19	; 0x04
    1378:	2b 83       	std	Y+3, r18	; 0x03
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	91 05       	cpc	r25, r1
    1382:	09 f1       	breq	.+66     	; 0x13c6 <DIO_SetPortDirection+0x66>
    1384:	2b 81       	ldd	r18, Y+3	; 0x03
    1386:	3c 81       	ldd	r19, Y+4	; 0x04
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	2c f4       	brge	.+10     	; 0x1398 <DIO_SetPortDirection+0x38>
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	61 f0       	breq	.+24     	; 0x13ae <DIO_SetPortDirection+0x4e>
    1396:	3a c0       	rjmp	.+116    	; 0x140c <DIO_SetPortDirection+0xac>
    1398:	2b 81       	ldd	r18, Y+3	; 0x03
    139a:	3c 81       	ldd	r19, Y+4	; 0x04
    139c:	22 30       	cpi	r18, 0x02	; 2
    139e:	31 05       	cpc	r19, r1
    13a0:	f1 f0       	breq	.+60     	; 0x13de <DIO_SetPortDirection+0x7e>
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	91 05       	cpc	r25, r1
    13aa:	29 f1       	breq	.+74     	; 0x13f6 <DIO_SetPortDirection+0x96>
    13ac:	2f c0       	rjmp	.+94     	; 0x140c <DIO_SetPortDirection+0xac>
	{
		case PORT_A:
			DIO_Port_Direction ? (DDRA = 0xFF) : (DDRA = 0);
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	88 23       	and	r24, r24
    13b2:	29 f0       	breq	.+10     	; 0x13be <DIO_SetPortDirection+0x5e>
    13b4:	ea e3       	ldi	r30, 0x3A	; 58
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	8f ef       	ldi	r24, 0xFF	; 255
    13ba:	80 83       	st	Z, r24
    13bc:	27 c0       	rjmp	.+78     	; 0x140c <DIO_SetPortDirection+0xac>
    13be:	ea e3       	ldi	r30, 0x3A	; 58
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	10 82       	st	Z, r1
    13c4:	23 c0       	rjmp	.+70     	; 0x140c <DIO_SetPortDirection+0xac>
			break;
		case PORT_B:
			DIO_Port_Direction ? (DDRB = 0xFF) : (DDRB = 0);
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	88 23       	and	r24, r24
    13ca:	29 f0       	breq	.+10     	; 0x13d6 <DIO_SetPortDirection+0x76>
    13cc:	e7 e3       	ldi	r30, 0x37	; 55
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	80 83       	st	Z, r24
    13d4:	1b c0       	rjmp	.+54     	; 0x140c <DIO_SetPortDirection+0xac>
    13d6:	e7 e3       	ldi	r30, 0x37	; 55
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	10 82       	st	Z, r1
    13dc:	17 c0       	rjmp	.+46     	; 0x140c <DIO_SetPortDirection+0xac>
			break;
		case PORT_C:
			DIO_Port_Direction ? (DDRC = 0xFF) : (DDRC = 0);
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	88 23       	and	r24, r24
    13e2:	29 f0       	breq	.+10     	; 0x13ee <DIO_SetPortDirection+0x8e>
    13e4:	e4 e3       	ldi	r30, 0x34	; 52
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	80 83       	st	Z, r24
    13ec:	0f c0       	rjmp	.+30     	; 0x140c <DIO_SetPortDirection+0xac>
    13ee:	e4 e3       	ldi	r30, 0x34	; 52
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	10 82       	st	Z, r1
    13f4:	0b c0       	rjmp	.+22     	; 0x140c <DIO_SetPortDirection+0xac>
			break;
		case PORT_D:
			DIO_Port_Direction ? (DDRD = 0xFF) : (DDRD = 0);
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	88 23       	and	r24, r24
    13fa:	29 f0       	breq	.+10     	; 0x1406 <DIO_SetPortDirection+0xa6>
    13fc:	e1 e3       	ldi	r30, 0x31	; 49
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	8f ef       	ldi	r24, 0xFF	; 255
    1402:	80 83       	st	Z, r24
    1404:	03 c0       	rjmp	.+6      	; 0x140c <DIO_SetPortDirection+0xac>
    1406:	e1 e3       	ldi	r30, 0x31	; 49
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	10 82       	st	Z, r1
			break;
		default:
			break;
	}
}
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <I2C_Init>:
#include "I2C_Init.h"
#include <avr/io.h>
#include <avr/delay.h>

void I2C_Init(I2C_Handle *handle)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <I2C_Init+0x6>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <I2C_Init+0x8>
    1422:	0f 92       	push	r0
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	9a 83       	std	Y+2, r25	; 0x02
    142a:	89 83       	std	Y+1, r24	; 0x01
	//init clock
	TWBR = (handle->clock == I2C_CLOCK_200KHZ) ? I2C_BIT_RATE_FOR_200KHZ : I2C_BIT_RATE_FOR_100KHZ;
    142c:	80 e2       	ldi	r24, 0x20	; 32
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9d 83       	std	Y+5, r25	; 0x05
    1432:	8c 83       	std	Y+4, r24	; 0x04
    1434:	e9 81       	ldd	r30, Y+1	; 0x01
    1436:	fa 81       	ldd	r31, Y+2	; 0x02
    1438:	82 85       	ldd	r24, Z+10	; 0x0a
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	19 f4       	brne	.+6      	; 0x1444 <I2C_Init+0x2a>
    143e:	90 e2       	ldi	r25, 0x20	; 32
    1440:	9b 83       	std	Y+3, r25	; 0x03
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <I2C_Init+0x2e>
    1444:	ec e0       	ldi	r30, 0x0C	; 12
    1446:	eb 83       	std	Y+3, r30	; 0x03
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	ec 81       	ldd	r30, Y+4	; 0x04
    144c:	fd 81       	ldd	r31, Y+5	; 0x05
    144e:	80 83       	st	Z, r24
	//init sender address
	TWAR = handle->address;
    1450:	a2 e2       	ldi	r26, 0x22	; 34
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e9 81       	ldd	r30, Y+1	; 0x01
    1456:	fa 81       	ldd	r31, Y+2	; 0x02
    1458:	81 85       	ldd	r24, Z+9	; 0x09
    145a:	8c 93       	st	X, r24
	//clear buff counts
	handle->receiveBuffCount = handle->sendBuffCount = 0;
    145c:	e9 81       	ldd	r30, Y+1	; 0x01
    145e:	fa 81       	ldd	r31, Y+2	; 0x02
    1460:	13 82       	std	Z+3, r1	; 0x03
    1462:	e9 81       	ldd	r30, Y+1	; 0x01
    1464:	fa 81       	ldd	r31, Y+2	; 0x02
    1466:	83 81       	ldd	r24, Z+3	; 0x03
    1468:	e9 81       	ldd	r30, Y+1	; 0x01
    146a:	fa 81       	ldd	r31, Y+2	; 0x02
    146c:	87 83       	std	Z+7, r24	; 0x07
}
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <I2C_Start>:



void I2C_Start(u8 address)						/* I2C start wait function */
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	60 97       	sbiw	r28, 0x10	; 16
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	88 8b       	std	Y+16, r24	; 0x10
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a0 e2       	ldi	r26, 0x20	; 32
    149a:	b1 e4       	ldi	r27, 0x41	; 65
    149c:	8b 87       	std	Y+11, r24	; 0x0b
    149e:	9c 87       	std	Y+12, r25	; 0x0c
    14a0:	ad 87       	std	Y+13, r26	; 0x0d
    14a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	4a e7       	ldi	r20, 0x7A	; 122
    14b2:	53 e4       	ldi	r21, 0x43	; 67
    14b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	8f 83       	std	Y+7, r24	; 0x07
    14be:	98 87       	std	Y+8, r25	; 0x08
    14c0:	a9 87       	std	Y+9, r26	; 0x09
    14c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14c4:	6f 81       	ldd	r22, Y+7	; 0x07
    14c6:	78 85       	ldd	r23, Y+8	; 0x08
    14c8:	89 85       	ldd	r24, Y+9	; 0x09
    14ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e8       	ldi	r20, 0x80	; 128
    14d2:	5f e3       	ldi	r21, 0x3F	; 63
    14d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14d8:	88 23       	and	r24, r24
    14da:	2c f4       	brge	.+10     	; 0x14e6 <I2C_Start+0x68>
		__ticks = 1;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	9e 83       	std	Y+6, r25	; 0x06
    14e2:	8d 83       	std	Y+5, r24	; 0x05
    14e4:	3f c0       	rjmp	.+126    	; 0x1564 <I2C_Start+0xe6>
	else if (__tmp > 65535)
    14e6:	6f 81       	ldd	r22, Y+7	; 0x07
    14e8:	78 85       	ldd	r23, Y+8	; 0x08
    14ea:	89 85       	ldd	r24, Y+9	; 0x09
    14ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	3f ef       	ldi	r19, 0xFF	; 255
    14f2:	4f e7       	ldi	r20, 0x7F	; 127
    14f4:	57 e4       	ldi	r21, 0x47	; 71
    14f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14fa:	18 16       	cp	r1, r24
    14fc:	4c f5       	brge	.+82     	; 0x1550 <I2C_Start+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1500:	7c 85       	ldd	r23, Y+12	; 0x0c
    1502:	8d 85       	ldd	r24, Y+13	; 0x0d
    1504:	9e 85       	ldd	r25, Y+14	; 0x0e
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e2       	ldi	r20, 0x20	; 32
    150c:	51 e4       	ldi	r21, 0x41	; 65
    150e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	bc 01       	movw	r22, r24
    1518:	cd 01       	movw	r24, r26
    151a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	9e 83       	std	Y+6, r25	; 0x06
    1524:	8d 83       	std	Y+5, r24	; 0x05
    1526:	0f c0       	rjmp	.+30     	; 0x1546 <I2C_Start+0xc8>
    1528:	89 e1       	ldi	r24, 0x19	; 25
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	9c 83       	std	Y+4, r25	; 0x04
    152e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <I2C_Start+0xb6>
    1538:	9c 83       	std	Y+4, r25	; 0x04
    153a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153c:	8d 81       	ldd	r24, Y+5	; 0x05
    153e:	9e 81       	ldd	r25, Y+6	; 0x06
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	9e 83       	std	Y+6, r25	; 0x06
    1544:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1546:	8d 81       	ldd	r24, Y+5	; 0x05
    1548:	9e 81       	ldd	r25, Y+6	; 0x06
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	69 f7       	brne	.-38     	; 0x1528 <I2C_Start+0xaa>
    154e:	14 c0       	rjmp	.+40     	; 0x1578 <I2C_Start+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1550:	6f 81       	ldd	r22, Y+7	; 0x07
    1552:	78 85       	ldd	r23, Y+8	; 0x08
    1554:	89 85       	ldd	r24, Y+9	; 0x09
    1556:	9a 85       	ldd	r25, Y+10	; 0x0a
    1558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	9e 83       	std	Y+6, r25	; 0x06
    1562:	8d 83       	std	Y+5, r24	; 0x05
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	9e 81       	ldd	r25, Y+6	; 0x06
    1568:	9a 83       	std	Y+2, r25	; 0x02
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	9a 81       	ldd	r25, Y+2	; 0x02
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <I2C_Start+0xf2>
    1574:	9a 83       	std	Y+2, r25	; 0x02
    1576:	89 83       	std	Y+1, r24	; 0x01
	uint8_t status;											/* Declare variable */
	while (1)
	{
		_delay_ms(10);
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
    1578:	e6 e5       	ldi	r30, 0x56	; 86
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	84 ea       	ldi	r24, 0xA4	; 164
    157e:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
    1580:	e6 e5       	ldi	r30, 0x56	; 86
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	88 23       	and	r24, r24
    1588:	dc f7       	brge	.-10     	; 0x1580 <I2C_Start+0x102>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    158a:	e1 e2       	ldi	r30, 0x21	; 33
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	88 7f       	andi	r24, 0xF8	; 248
    1592:	8f 87       	std	Y+15, r24	; 0x0f
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
    1594:	8f 85       	ldd	r24, Y+15	; 0x0f
    1596:	88 30       	cpi	r24, 0x08	; 8
    1598:	09 f0       	breq	.+2      	; 0x159c <I2C_Start+0x11e>
    159a:	7c cf       	rjmp	.-264    	; 0x1494 <I2C_Start+0x16>
		continue;											/* If no then continue with start loop again */
		TWDR = address;								/* If yes then write SLA+W in TWI data register */
    159c:	e3 e2       	ldi	r30, 0x23	; 35
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	88 89       	ldd	r24, Y+16	; 0x10
    15a2:	80 83       	st	Z, r24
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
    15a4:	e6 e5       	ldi	r30, 0x56	; 86
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	84 e8       	ldi	r24, 0x84	; 132
    15aa:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
    15ac:	e6 e5       	ldi	r30, 0x56	; 86
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	88 23       	and	r24, r24
    15b4:	dc f7       	brge	.-10     	; 0x15ac <I2C_Start+0x12e>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    15b6:	e1 e2       	ldi	r30, 0x21	; 33
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	88 7f       	andi	r24, 0xF8	; 248
    15be:	8f 87       	std	Y+15, r24	; 0x0f
		if (status != I2C_ACK_SLA_W_STATUS && status != I2C_ACK_SLA_R_STATUS)								/* Check weather SLA+W transmitted & ack received or not? */
    15c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    15c2:	88 31       	cpi	r24, 0x18	; 24
    15c4:	31 f0       	breq	.+12     	; 0x15d2 <I2C_Start+0x154>
    15c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15c8:	88 33       	cpi	r24, 0x38	; 56
    15ca:	19 f0       	breq	.+6      	; 0x15d2 <I2C_Start+0x154>
		{
			I2C_End();										/* If not then generate stop condition */
    15cc:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <I2C_End>
    15d0:	61 cf       	rjmp	.-318    	; 0x1494 <I2C_Start+0x16>
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
    15d2:	60 96       	adiw	r28, 0x10	; 16
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	cd bf       	out	0x3d, r28	; 61
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <I2C_Master_Write>:
}

s8 I2C_Master_Write(I2C_Handle *handle)
{
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <I2C_Master_Write+0x6>
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <I2C_Master_Write+0x8>
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	9b 83       	std	Y+3, r25	; 0x03
    15f2:	8a 83       	std	Y+2, r24	; 0x02
	handle->sendBuffCount = 0;
    15f4:	ea 81       	ldd	r30, Y+2	; 0x02
    15f6:	fb 81       	ldd	r31, Y+3	; 0x03
    15f8:	13 82       	std	Z+3, r1	; 0x03
    15fa:	2b c0       	rjmp	.+86     	; 0x1652 <I2C_Master_Write+0x6e>
	uint8_t status;
	while(handle->sendBuffCount < handle->sendBuffLen)
	{
		TWDR = handle->sendBuff[handle->sendBuffCount];
    15fc:	a3 e2       	ldi	r26, 0x23	; 35
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	ea 81       	ldd	r30, Y+2	; 0x02
    1602:	fb 81       	ldd	r31, Y+3	; 0x03
    1604:	20 81       	ld	r18, Z
    1606:	31 81       	ldd	r19, Z+1	; 0x01
    1608:	ea 81       	ldd	r30, Y+2	; 0x02
    160a:	fb 81       	ldd	r31, Y+3	; 0x03
    160c:	83 81       	ldd	r24, Z+3	; 0x03
    160e:	88 2f       	mov	r24, r24
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	f9 01       	movw	r30, r18
    1614:	e8 0f       	add	r30, r24
    1616:	f9 1f       	adc	r31, r25
    1618:	80 81       	ld	r24, Z
    161a:	8c 93       	st	X, r24
		TWCR = (1<<TWEN)|(1<<TWINT);
    161c:	e6 e5       	ldi	r30, 0x56	; 86
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	84 e8       	ldi	r24, 0x84	; 132
    1622:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));
    1624:	e6 e5       	ldi	r30, 0x56	; 86
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	88 23       	and	r24, r24
    162c:	dc f7       	brge	.-10     	; 0x1624 <I2C_Master_Write+0x40>
		status = TWSR & 0xF8;
    162e:	e1 e2       	ldi	r30, 0x21	; 33
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	88 7f       	andi	r24, 0xF8	; 248
    1636:	89 83       	std	Y+1, r24	; 0x01
		if(status != I2C_MASTER_ACK_DATA_STATUS)
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	88 32       	cpi	r24, 0x28	; 40
    163c:	19 f0       	breq	.+6      	; 0x1644 <I2C_Master_Write+0x60>
		{
			//continue;
			return ERR;
    163e:	8f ef       	ldi	r24, 0xFF	; 255
    1640:	8c 83       	std	Y+4, r24	; 0x04
    1642:	11 c0       	rjmp	.+34     	; 0x1666 <I2C_Master_Write+0x82>
		}
		handle->sendBuffCount++;
    1644:	ea 81       	ldd	r30, Y+2	; 0x02
    1646:	fb 81       	ldd	r31, Y+3	; 0x03
    1648:	83 81       	ldd	r24, Z+3	; 0x03
    164a:	8f 5f       	subi	r24, 0xFF	; 255
    164c:	ea 81       	ldd	r30, Y+2	; 0x02
    164e:	fb 81       	ldd	r31, Y+3	; 0x03
    1650:	83 83       	std	Z+3, r24	; 0x03

s8 I2C_Master_Write(I2C_Handle *handle)
{
	handle->sendBuffCount = 0;
	uint8_t status;
	while(handle->sendBuffCount < handle->sendBuffLen)
    1652:	ea 81       	ldd	r30, Y+2	; 0x02
    1654:	fb 81       	ldd	r31, Y+3	; 0x03
    1656:	93 81       	ldd	r25, Z+3	; 0x03
    1658:	ea 81       	ldd	r30, Y+2	; 0x02
    165a:	fb 81       	ldd	r31, Y+3	; 0x03
    165c:	82 81       	ldd	r24, Z+2	; 0x02
    165e:	98 17       	cp	r25, r24
    1660:	68 f2       	brcs	.-102    	; 0x15fc <I2C_Master_Write+0x18>
			//continue;
			return ERR;
		}
		handle->sendBuffCount++;
	}
	return 1;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	8c 83       	std	Y+4, r24	; 0x04
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <I2C_Master_Read>:

/** Read **/
s8 I2C_Master_Read(I2C_Handle *handle)
{
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	62 97       	sbiw	r28, 0x12	; 18
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	99 8b       	std	Y+17, r25	; 0x11
    168c:	88 8b       	std	Y+16, r24	; 0x10
	uint8_t status;
	TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
    168e:	e6 e5       	ldi	r30, 0x56	; 86
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	84 e8       	ldi	r24, 0x84	; 132
    1694:	80 83       	st	Z, r24
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	a0 e2       	ldi	r26, 0x20	; 32
    169c:	b1 e4       	ldi	r27, 0x41	; 65
    169e:	8b 87       	std	Y+11, r24	; 0x0b
    16a0:	9c 87       	std	Y+12, r25	; 0x0c
    16a2:	ad 87       	std	Y+13, r26	; 0x0d
    16a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	4a e7       	ldi	r20, 0x7A	; 122
    16b4:	53 e4       	ldi	r21, 0x43	; 67
    16b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	8f 83       	std	Y+7, r24	; 0x07
    16c0:	98 87       	std	Y+8, r25	; 0x08
    16c2:	a9 87       	std	Y+9, r26	; 0x09
    16c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16c6:	6f 81       	ldd	r22, Y+7	; 0x07
    16c8:	78 85       	ldd	r23, Y+8	; 0x08
    16ca:	89 85       	ldd	r24, Y+9	; 0x09
    16cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e8       	ldi	r20, 0x80	; 128
    16d4:	5f e3       	ldi	r21, 0x3F	; 63
    16d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16da:	88 23       	and	r24, r24
    16dc:	2c f4       	brge	.+10     	; 0x16e8 <I2C_Master_Read+0x72>
		__ticks = 1;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	9e 83       	std	Y+6, r25	; 0x06
    16e4:	8d 83       	std	Y+5, r24	; 0x05
    16e6:	3f c0       	rjmp	.+126    	; 0x1766 <I2C_Master_Read+0xf0>
	else if (__tmp > 65535)
    16e8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ea:	78 85       	ldd	r23, Y+8	; 0x08
    16ec:	89 85       	ldd	r24, Y+9	; 0x09
    16ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	3f ef       	ldi	r19, 0xFF	; 255
    16f4:	4f e7       	ldi	r20, 0x7F	; 127
    16f6:	57 e4       	ldi	r21, 0x47	; 71
    16f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16fc:	18 16       	cp	r1, r24
    16fe:	4c f5       	brge	.+82     	; 0x1752 <I2C_Master_Read+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1700:	6b 85       	ldd	r22, Y+11	; 0x0b
    1702:	7c 85       	ldd	r23, Y+12	; 0x0c
    1704:	8d 85       	ldd	r24, Y+13	; 0x0d
    1706:	9e 85       	ldd	r25, Y+14	; 0x0e
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e2       	ldi	r20, 0x20	; 32
    170e:	51 e4       	ldi	r21, 0x41	; 65
    1710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	bc 01       	movw	r22, r24
    171a:	cd 01       	movw	r24, r26
    171c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	9e 83       	std	Y+6, r25	; 0x06
    1726:	8d 83       	std	Y+5, r24	; 0x05
    1728:	0f c0       	rjmp	.+30     	; 0x1748 <I2C_Master_Read+0xd2>
    172a:	89 e1       	ldi	r24, 0x19	; 25
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	9c 83       	std	Y+4, r25	; 0x04
    1730:	8b 83       	std	Y+3, r24	; 0x03
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <I2C_Master_Read+0xc0>
    173a:	9c 83       	std	Y+4, r25	; 0x04
    173c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173e:	8d 81       	ldd	r24, Y+5	; 0x05
    1740:	9e 81       	ldd	r25, Y+6	; 0x06
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	9e 83       	std	Y+6, r25	; 0x06
    1746:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	9e 81       	ldd	r25, Y+6	; 0x06
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	69 f7       	brne	.-38     	; 0x172a <I2C_Master_Read+0xb4>
    1750:	14 c0       	rjmp	.+40     	; 0x177a <I2C_Master_Read+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1752:	6f 81       	ldd	r22, Y+7	; 0x07
    1754:	78 85       	ldd	r23, Y+8	; 0x08
    1756:	89 85       	ldd	r24, Y+9	; 0x09
    1758:	9a 85       	ldd	r25, Y+10	; 0x0a
    175a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	9e 83       	std	Y+6, r25	; 0x06
    1764:	8d 83       	std	Y+5, r24	; 0x05
    1766:	8d 81       	ldd	r24, Y+5	; 0x05
    1768:	9e 81       	ldd	r25, Y+6	; 0x06
    176a:	9a 83       	std	Y+2, r25	; 0x02
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	9a 81       	ldd	r25, Y+2	; 0x02
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <I2C_Master_Read+0xfc>
    1776:	9a 83       	std	Y+2, r25	; 0x02
    1778:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	while(1)
	{
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
    177a:	e6 e5       	ldi	r30, 0x56	; 86
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	88 23       	and	r24, r24
    1782:	dc f7       	brge	.-10     	; 0x177a <I2C_Master_Read+0x104>
		status = TWSR & 0xF8;
    1784:	e1 e2       	ldi	r30, 0x21	; 33
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	88 7f       	andi	r24, 0xF8	; 248
    178c:	8f 87       	std	Y+15, r24	; 0x0f
		if(status != I2C_MASTER_ACK_DATA_RECEIVED_STATUS)
    178e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1790:	80 35       	cpi	r24, 0x50	; 80
    1792:	19 f0       	breq	.+6      	; 0x179a <I2C_Master_Read+0x124>
		{
			return ERR;
    1794:	8f ef       	ldi	r24, 0xFF	; 255
    1796:	8a 8b       	std	Y+18, r24	; 0x12
    1798:	26 c0       	rjmp	.+76     	; 0x17e6 <I2C_Master_Read+0x170>
		}
		if(handle->receiveBuffCount < handle->receiveBuffLen)
    179a:	e8 89       	ldd	r30, Y+16	; 0x10
    179c:	f9 89       	ldd	r31, Y+17	; 0x11
    179e:	97 81       	ldd	r25, Z+7	; 0x07
    17a0:	e8 89       	ldd	r30, Y+16	; 0x10
    17a2:	f9 89       	ldd	r31, Y+17	; 0x11
    17a4:	86 81       	ldd	r24, Z+6	; 0x06
    17a6:	98 17       	cp	r25, r24
    17a8:	e0 f4       	brcc	.+56     	; 0x17e2 <I2C_Master_Read+0x16c>
		{
			handle->receiveBuff[handle->receiveBuffCount] = TWDR;
    17aa:	e8 89       	ldd	r30, Y+16	; 0x10
    17ac:	f9 89       	ldd	r31, Y+17	; 0x11
    17ae:	24 81       	ldd	r18, Z+4	; 0x04
    17b0:	35 81       	ldd	r19, Z+5	; 0x05
    17b2:	e8 89       	ldd	r30, Y+16	; 0x10
    17b4:	f9 89       	ldd	r31, Y+17	; 0x11
    17b6:	87 81       	ldd	r24, Z+7	; 0x07
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	d9 01       	movw	r26, r18
    17be:	a8 0f       	add	r26, r24
    17c0:	b9 1f       	adc	r27, r25
    17c2:	e3 e2       	ldi	r30, 0x23	; 35
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	8c 93       	st	X, r24
			handle->receiveBuffCount++;
    17ca:	e8 89       	ldd	r30, Y+16	; 0x10
    17cc:	f9 89       	ldd	r31, Y+17	; 0x11
    17ce:	87 81       	ldd	r24, Z+7	; 0x07
    17d0:	8f 5f       	subi	r24, 0xFF	; 255
    17d2:	e8 89       	ldd	r30, Y+16	; 0x10
    17d4:	f9 89       	ldd	r31, Y+17	; 0x11
    17d6:	87 83       	std	Z+7, r24	; 0x07
		}
		else
		{
			return 1;
		}
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
    17d8:	e6 e5       	ldi	r30, 0x56	; 86
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	84 e8       	ldi	r24, 0x84	; 132
    17de:	80 83       	st	Z, r24
    17e0:	cc cf       	rjmp	.-104    	; 0x177a <I2C_Master_Read+0x104>
			handle->receiveBuff[handle->receiveBuffCount] = TWDR;
			handle->receiveBuffCount++;
		}
		else
		{
			return 1;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	8a 8b       	std	Y+18, r24	; 0x12
    17e6:	8a 89       	ldd	r24, Y+18	; 0x12
		}
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
	}
}
    17e8:	62 96       	adiw	r28, 0x12	; 18
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <I2C_Slave_Write>:

s8 I2C_Slave_Write(I2C_Handle *handle)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	62 97       	sbiw	r28, 0x12	; 18
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	99 8b       	std	Y+17, r25	; 0x11
    1810:	88 8b       	std	Y+16, r24	; 0x10
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);
    1812:	e6 e5       	ldi	r30, 0x56	; 86
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	84 ec       	ldi	r24, 0xC4	; 196
    1818:	80 83       	st	Z, r24
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	a0 e2       	ldi	r26, 0x20	; 32
    1820:	b1 e4       	ldi	r27, 0x41	; 65
    1822:	8b 87       	std	Y+11, r24	; 0x0b
    1824:	9c 87       	std	Y+12, r25	; 0x0c
    1826:	ad 87       	std	Y+13, r26	; 0x0d
    1828:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182a:	6b 85       	ldd	r22, Y+11	; 0x0b
    182c:	7c 85       	ldd	r23, Y+12	; 0x0c
    182e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1830:	9e 85       	ldd	r25, Y+14	; 0x0e
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	4a e7       	ldi	r20, 0x7A	; 122
    1838:	53 e4       	ldi	r21, 0x43	; 67
    183a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	8f 83       	std	Y+7, r24	; 0x07
    1844:	98 87       	std	Y+8, r25	; 0x08
    1846:	a9 87       	std	Y+9, r26	; 0x09
    1848:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    184a:	6f 81       	ldd	r22, Y+7	; 0x07
    184c:	78 85       	ldd	r23, Y+8	; 0x08
    184e:	89 85       	ldd	r24, Y+9	; 0x09
    1850:	9a 85       	ldd	r25, Y+10	; 0x0a
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e8       	ldi	r20, 0x80	; 128
    1858:	5f e3       	ldi	r21, 0x3F	; 63
    185a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    185e:	88 23       	and	r24, r24
    1860:	2c f4       	brge	.+10     	; 0x186c <I2C_Slave_Write+0x72>
		__ticks = 1;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	9e 83       	std	Y+6, r25	; 0x06
    1868:	8d 83       	std	Y+5, r24	; 0x05
    186a:	3f c0       	rjmp	.+126    	; 0x18ea <I2C_Slave_Write+0xf0>
	else if (__tmp > 65535)
    186c:	6f 81       	ldd	r22, Y+7	; 0x07
    186e:	78 85       	ldd	r23, Y+8	; 0x08
    1870:	89 85       	ldd	r24, Y+9	; 0x09
    1872:	9a 85       	ldd	r25, Y+10	; 0x0a
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	3f ef       	ldi	r19, 0xFF	; 255
    1878:	4f e7       	ldi	r20, 0x7F	; 127
    187a:	57 e4       	ldi	r21, 0x47	; 71
    187c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1880:	18 16       	cp	r1, r24
    1882:	4c f5       	brge	.+82     	; 0x18d6 <I2C_Slave_Write+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1884:	6b 85       	ldd	r22, Y+11	; 0x0b
    1886:	7c 85       	ldd	r23, Y+12	; 0x0c
    1888:	8d 85       	ldd	r24, Y+13	; 0x0d
    188a:	9e 85       	ldd	r25, Y+14	; 0x0e
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e2       	ldi	r20, 0x20	; 32
    1892:	51 e4       	ldi	r21, 0x41	; 65
    1894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	9e 83       	std	Y+6, r25	; 0x06
    18aa:	8d 83       	std	Y+5, r24	; 0x05
    18ac:	0f c0       	rjmp	.+30     	; 0x18cc <I2C_Slave_Write+0xd2>
    18ae:	89 e1       	ldi	r24, 0x19	; 25
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	9c 83       	std	Y+4, r25	; 0x04
    18b4:	8b 83       	std	Y+3, r24	; 0x03
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <I2C_Slave_Write+0xc0>
    18be:	9c 83       	std	Y+4, r25	; 0x04
    18c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c2:	8d 81       	ldd	r24, Y+5	; 0x05
    18c4:	9e 81       	ldd	r25, Y+6	; 0x06
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	9e 83       	std	Y+6, r25	; 0x06
    18ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18cc:	8d 81       	ldd	r24, Y+5	; 0x05
    18ce:	9e 81       	ldd	r25, Y+6	; 0x06
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	69 f7       	brne	.-38     	; 0x18ae <I2C_Slave_Write+0xb4>
    18d4:	14 c0       	rjmp	.+40     	; 0x18fe <I2C_Slave_Write+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d6:	6f 81       	ldd	r22, Y+7	; 0x07
    18d8:	78 85       	ldd	r23, Y+8	; 0x08
    18da:	89 85       	ldd	r24, Y+9	; 0x09
    18dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	9e 83       	std	Y+6, r25	; 0x06
    18e8:	8d 83       	std	Y+5, r24	; 0x05
    18ea:	8d 81       	ldd	r24, Y+5	; 0x05
    18ec:	9e 81       	ldd	r25, Y+6	; 0x06
    18ee:	9a 83       	std	Y+2, r25	; 0x02
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	9a 81       	ldd	r25, Y+2	; 0x02
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <I2C_Slave_Write+0xfc>
    18fa:	9a 83       	std	Y+2, r25	; 0x02
    18fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	uint8_t status;
	while(1)
	{
		while (!(TWCR & (1<<TWINT)));
    18fe:	e6 e5       	ldi	r30, 0x56	; 86
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	88 23       	and	r24, r24
    1906:	dc f7       	brge	.-10     	; 0x18fe <I2C_Slave_Write+0x104>
		status = TWSR & 0xF8;
    1908:	e1 e2       	ldi	r30, 0x21	; 33
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	88 7f       	andi	r24, 0xF8	; 248
    1910:	8f 87       	std	Y+15, r24	; 0x0f
		if(status == I2C_SLAVE_ACK_DATA_STATUS)
    1912:	8f 85       	ldd	r24, Y+15	; 0x0f
    1914:	88 3b       	cpi	r24, 0xB8	; 184
    1916:	19 f5       	brne	.+70     	; 0x195e <I2C_Slave_Write+0x164>
		{
			if(handle->sendBuffCount < handle->sendBuffLen)
    1918:	e8 89       	ldd	r30, Y+16	; 0x10
    191a:	f9 89       	ldd	r31, Y+17	; 0x11
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	e8 89       	ldd	r30, Y+16	; 0x10
    1920:	f9 89       	ldd	r31, Y+17	; 0x11
    1922:	82 81       	ldd	r24, Z+2	; 0x02
    1924:	98 17       	cp	r25, r24
    1926:	c0 f4       	brcc	.+48     	; 0x1958 <I2C_Slave_Write+0x15e>
			{
				TWDR = handle->sendBuff[handle->sendBuffCount];
    1928:	a3 e2       	ldi	r26, 0x23	; 35
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e8 89       	ldd	r30, Y+16	; 0x10
    192e:	f9 89       	ldd	r31, Y+17	; 0x11
    1930:	20 81       	ld	r18, Z
    1932:	31 81       	ldd	r19, Z+1	; 0x01
    1934:	e8 89       	ldd	r30, Y+16	; 0x10
    1936:	f9 89       	ldd	r31, Y+17	; 0x11
    1938:	83 81       	ldd	r24, Z+3	; 0x03
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	f9 01       	movw	r30, r18
    1940:	e8 0f       	add	r30, r24
    1942:	f9 1f       	adc	r31, r25
    1944:	80 81       	ld	r24, Z
    1946:	8c 93       	st	X, r24
				handle->sendBuffCount++;
    1948:	e8 89       	ldd	r30, Y+16	; 0x10
    194a:	f9 89       	ldd	r31, Y+17	; 0x11
    194c:	83 81       	ldd	r24, Z+3	; 0x03
    194e:	8f 5f       	subi	r24, 0xFF	; 255
    1950:	e8 89       	ldd	r30, Y+16	; 0x10
    1952:	f9 89       	ldd	r31, Y+17	; 0x11
    1954:	83 83       	std	Z+3, r24	; 0x03
    1956:	09 c0       	rjmp	.+18     	; 0x196a <I2C_Slave_Write+0x170>
			}
			else
			{
				return 1;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	8a 8b       	std	Y+18, r24	; 0x12
    195c:	0b c0       	rjmp	.+22     	; 0x1974 <I2C_Slave_Write+0x17a>
			}
		}
		else if(status != I2C_SLAVE_ACK_SLA_R_STATUS)
    195e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1960:	88 3a       	cpi	r24, 0xA8	; 168
    1962:	19 f0       	breq	.+6      	; 0x196a <I2C_Slave_Write+0x170>
		{
			return ERR;
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	8a 8b       	std	Y+18, r24	; 0x12
    1968:	05 c0       	rjmp	.+10     	; 0x1974 <I2C_Slave_Write+0x17a>
		}
		TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);
    196a:	e6 e5       	ldi	r30, 0x56	; 86
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	84 ec       	ldi	r24, 0xC4	; 196
    1970:	80 83       	st	Z, r24
    1972:	c5 cf       	rjmp	.-118    	; 0x18fe <I2C_Slave_Write+0x104>

		//		else if(status == I2C_SLAVE_LAST_BYTE_STATUS)
//		{
//
//		}
	}
    1974:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1976:	62 96       	adiw	r28, 0x12	; 18
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <I2C_Slave_Read>:

s8 I2C_Slave_Read(I2C_Handle *handle)
{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	62 97       	sbiw	r28, 0x12	; 18
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	99 8b       	std	Y+17, r25	; 0x11
    199e:	88 8b       	std	Y+16, r24	; 0x10
	handle->receiveBuffCount = 0;
    19a0:	e8 89       	ldd	r30, Y+16	; 0x10
    19a2:	f9 89       	ldd	r31, Y+17	; 0x11
    19a4:	17 82       	std	Z+7, r1	; 0x07
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);
    19a6:	e6 e5       	ldi	r30, 0x56	; 86
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	84 ec       	ldi	r24, 0xC4	; 196
    19ac:	80 83       	st	Z, r24
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	a0 e2       	ldi	r26, 0x20	; 32
    19b4:	b1 e4       	ldi	r27, 0x41	; 65
    19b6:	8b 87       	std	Y+11, r24	; 0x0b
    19b8:	9c 87       	std	Y+12, r25	; 0x0c
    19ba:	ad 87       	std	Y+13, r26	; 0x0d
    19bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19be:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	4a e7       	ldi	r20, 0x7A	; 122
    19cc:	53 e4       	ldi	r21, 0x43	; 67
    19ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	8f 83       	std	Y+7, r24	; 0x07
    19d8:	98 87       	std	Y+8, r25	; 0x08
    19da:	a9 87       	std	Y+9, r26	; 0x09
    19dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19de:	6f 81       	ldd	r22, Y+7	; 0x07
    19e0:	78 85       	ldd	r23, Y+8	; 0x08
    19e2:	89 85       	ldd	r24, Y+9	; 0x09
    19e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e8       	ldi	r20, 0x80	; 128
    19ec:	5f e3       	ldi	r21, 0x3F	; 63
    19ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19f2:	88 23       	and	r24, r24
    19f4:	2c f4       	brge	.+10     	; 0x1a00 <I2C_Slave_Read+0x78>
		__ticks = 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	9e 83       	std	Y+6, r25	; 0x06
    19fc:	8d 83       	std	Y+5, r24	; 0x05
    19fe:	3f c0       	rjmp	.+126    	; 0x1a7e <I2C_Slave_Read+0xf6>
	else if (__tmp > 65535)
    1a00:	6f 81       	ldd	r22, Y+7	; 0x07
    1a02:	78 85       	ldd	r23, Y+8	; 0x08
    1a04:	89 85       	ldd	r24, Y+9	; 0x09
    1a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	3f ef       	ldi	r19, 0xFF	; 255
    1a0c:	4f e7       	ldi	r20, 0x7F	; 127
    1a0e:	57 e4       	ldi	r21, 0x47	; 71
    1a10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a14:	18 16       	cp	r1, r24
    1a16:	4c f5       	brge	.+82     	; 0x1a6a <I2C_Slave_Read+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e2       	ldi	r20, 0x20	; 32
    1a26:	51 e4       	ldi	r21, 0x41	; 65
    1a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	bc 01       	movw	r22, r24
    1a32:	cd 01       	movw	r24, r26
    1a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	9e 83       	std	Y+6, r25	; 0x06
    1a3e:	8d 83       	std	Y+5, r24	; 0x05
    1a40:	0f c0       	rjmp	.+30     	; 0x1a60 <I2C_Slave_Read+0xd8>
    1a42:	89 e1       	ldi	r24, 0x19	; 25
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	9c 83       	std	Y+4, r25	; 0x04
    1a48:	8b 83       	std	Y+3, r24	; 0x03
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <I2C_Slave_Read+0xc6>
    1a52:	9c 83       	std	Y+4, r25	; 0x04
    1a54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a56:	8d 81       	ldd	r24, Y+5	; 0x05
    1a58:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	9e 83       	std	Y+6, r25	; 0x06
    1a5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a60:	8d 81       	ldd	r24, Y+5	; 0x05
    1a62:	9e 81       	ldd	r25, Y+6	; 0x06
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	69 f7       	brne	.-38     	; 0x1a42 <I2C_Slave_Read+0xba>
    1a68:	14 c0       	rjmp	.+40     	; 0x1a92 <I2C_Slave_Read+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6c:	78 85       	ldd	r23, Y+8	; 0x08
    1a6e:	89 85       	ldd	r24, Y+9	; 0x09
    1a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9e 83       	std	Y+6, r25	; 0x06
    1a7c:	8d 83       	std	Y+5, r24	; 0x05
    1a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a80:	9e 81       	ldd	r25, Y+6	; 0x06
    1a82:	9a 83       	std	Y+2, r25	; 0x02
    1a84:	89 83       	std	Y+1, r24	; 0x01
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <I2C_Slave_Read+0x102>
    1a8e:	9a 83       	std	Y+2, r25	; 0x02
    1a90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	uint8_t status;
	while(1)
	{
		while (!(TWCR & (1<<TWINT)));
    1a92:	e6 e5       	ldi	r30, 0x56	; 86
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	88 23       	and	r24, r24
    1a9a:	dc f7       	brge	.-10     	; 0x1a92 <I2C_Slave_Read+0x10a>
		status = TWSR & 0xF8;
    1a9c:	e1 e2       	ldi	r30, 0x21	; 33
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	88 7f       	andi	r24, 0xF8	; 248
    1aa4:	8f 87       	std	Y+15, r24	; 0x0f
		if(status == I2C_SLAVE_ACK_DATA_RECEIVED_STATUS)
    1aa6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa8:	80 38       	cpi	r24, 0x80	; 128
    1aaa:	19 f5       	brne	.+70     	; 0x1af2 <I2C_Slave_Read+0x16a>
		{
			if(handle->receiveBuffCount < handle->receiveBuffLen)
    1aac:	e8 89       	ldd	r30, Y+16	; 0x10
    1aae:	f9 89       	ldd	r31, Y+17	; 0x11
    1ab0:	97 81       	ldd	r25, Z+7	; 0x07
    1ab2:	e8 89       	ldd	r30, Y+16	; 0x10
    1ab4:	f9 89       	ldd	r31, Y+17	; 0x11
    1ab6:	86 81       	ldd	r24, Z+6	; 0x06
    1ab8:	98 17       	cp	r25, r24
    1aba:	c0 f4       	brcc	.+48     	; 0x1aec <I2C_Slave_Read+0x164>
			{
				//TWDR = handle->receiveBuff[handle->receiveBuffCount];
				handle->receiveBuff[handle->receiveBuffCount] = TWDR;
    1abc:	e8 89       	ldd	r30, Y+16	; 0x10
    1abe:	f9 89       	ldd	r31, Y+17	; 0x11
    1ac0:	24 81       	ldd	r18, Z+4	; 0x04
    1ac2:	35 81       	ldd	r19, Z+5	; 0x05
    1ac4:	e8 89       	ldd	r30, Y+16	; 0x10
    1ac6:	f9 89       	ldd	r31, Y+17	; 0x11
    1ac8:	87 81       	ldd	r24, Z+7	; 0x07
    1aca:	88 2f       	mov	r24, r24
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	d9 01       	movw	r26, r18
    1ad0:	a8 0f       	add	r26, r24
    1ad2:	b9 1f       	adc	r27, r25
    1ad4:	e3 e2       	ldi	r30, 0x23	; 35
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	8c 93       	st	X, r24
				handle->receiveBuffCount++;
    1adc:	e8 89       	ldd	r30, Y+16	; 0x10
    1ade:	f9 89       	ldd	r31, Y+17	; 0x11
    1ae0:	87 81       	ldd	r24, Z+7	; 0x07
    1ae2:	8f 5f       	subi	r24, 0xFF	; 255
    1ae4:	e8 89       	ldd	r30, Y+16	; 0x10
    1ae6:	f9 89       	ldd	r31, Y+17	; 0x11
    1ae8:	87 83       	std	Z+7, r24	; 0x07
    1aea:	0f c0       	rjmp	.+30     	; 0x1b0a <I2C_Slave_Read+0x182>
			}
			else
			{
				return 2;
    1aec:	82 e0       	ldi	r24, 0x02	; 2
    1aee:	8a 8b       	std	Y+18, r24	; 0x12
    1af0:	11 c0       	rjmp	.+34     	; 0x1b14 <I2C_Slave_Read+0x18c>
			}
		}
		else if(status != I2C_SLAVE_ACK_SLA_W_STATUS)
    1af2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1af4:	80 36       	cpi	r24, 0x60	; 96
    1af6:	19 f0       	breq	.+6      	; 0x1afe <I2C_Slave_Read+0x176>
		{
			//return status;
			return ERR;
    1af8:	8f ef       	ldi	r24, 0xFF	; 255
    1afa:	8a 8b       	std	Y+18, r24	; 0x12
    1afc:	0b c0       	rjmp	.+22     	; 0x1b14 <I2C_Slave_Read+0x18c>
		}
		else if(status == I2C_STOP_RECEIVED_STATUS)
    1afe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b00:	80 3a       	cpi	r24, 0xA0	; 160
    1b02:	19 f4       	brne	.+6      	; 0x1b0a <I2C_Slave_Read+0x182>
		{
			return 1;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	8a 8b       	std	Y+18, r24	; 0x12
    1b08:	05 c0       	rjmp	.+10     	; 0x1b14 <I2C_Slave_Read+0x18c>
		}
		TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);
    1b0a:	e6 e5       	ldi	r30, 0x56	; 86
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	84 ec       	ldi	r24, 0xC4	; 196
    1b10:	80 83       	st	Z, r24
    1b12:	bf cf       	rjmp	.-130    	; 0x1a92 <I2C_Slave_Read+0x10a>
	}
    1b14:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1b16:	62 96       	adiw	r28, 0x12	; 18
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <I2C_End>:


void I2C_End()
{
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
    1b30:	e6 e5       	ldi	r30, 0x56	; 86
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	84 e9       	ldi	r24, 0x94	; 148
    1b36:	80 83       	st	Z, r24
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */
    1b38:	e6 e5       	ldi	r30, 0x56	; 86
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	88 2f       	mov	r24, r24
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	80 71       	andi	r24, 0x10	; 16
    1b44:	90 70       	andi	r25, 0x00	; 0
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	b9 f7       	brne	.-18     	; 0x1b38 <I2C_End+0x10>
}
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <LCD_WriteCommand>:
#include "DIO_Init.h"
#include <util/delay.h>
#include <string.h>

void LCD_WriteCommand(u8 LCD_Command)
{
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	2f 97       	sbiw	r28, 0x0f	; 15
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	de bf       	out	0x3e, r29	; 62
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	cd bf       	out	0x3d, r28	; 61
    1b64:	8f 87       	std	Y+15, r24	; 0x0f
	//CLEAR RS AND RW
	DIO_SetPinValue(LCD_CONTROL_PORT,LCD_RS,LOW);
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	62 e0       	ldi	r22, 0x02	; 2
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_PORT,LCD_RW,LOW);
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	61 e0       	ldi	r22, 0x01	; 1
    1b74:	40 e0       	ldi	r20, 0x00	; 0
    1b76:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinValue>

	//SET PORT COMMAND
	DIO_SetPortValue(LCD_DATA_PORT,LCD_Command);
    1b7a:	83 e0       	ldi	r24, 0x03	; 3
    1b7c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b7e:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_SetPortValue>

	//E1 FOR 1 MS
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_E,HIGH);
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	41 e0       	ldi	r20, 0x01	; 1
    1b88:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinValue>
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a0 e8       	ldi	r26, 0x80	; 128
    1b92:	bf e3       	ldi	r27, 0x3F	; 63
    1b94:	8b 87       	std	Y+11, r24	; 0x0b
    1b96:	9c 87       	std	Y+12, r25	; 0x0c
    1b98:	ad 87       	std	Y+13, r26	; 0x0d
    1b9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	4a e7       	ldi	r20, 0x7A	; 122
    1baa:	53 e4       	ldi	r21, 0x43	; 67
    1bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	8f 83       	std	Y+7, r24	; 0x07
    1bb6:	98 87       	std	Y+8, r25	; 0x08
    1bb8:	a9 87       	std	Y+9, r26	; 0x09
    1bba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bbe:	78 85       	ldd	r23, Y+8	; 0x08
    1bc0:	89 85       	ldd	r24, Y+9	; 0x09
    1bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e8       	ldi	r20, 0x80	; 128
    1bca:	5f e3       	ldi	r21, 0x3F	; 63
    1bcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd0:	88 23       	and	r24, r24
    1bd2:	2c f4       	brge	.+10     	; 0x1bde <LCD_WriteCommand+0x8e>
		__ticks = 1;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	9e 83       	std	Y+6, r25	; 0x06
    1bda:	8d 83       	std	Y+5, r24	; 0x05
    1bdc:	3f c0       	rjmp	.+126    	; 0x1c5c <LCD_WriteCommand+0x10c>
	else if (__tmp > 65535)
    1bde:	6f 81       	ldd	r22, Y+7	; 0x07
    1be0:	78 85       	ldd	r23, Y+8	; 0x08
    1be2:	89 85       	ldd	r24, Y+9	; 0x09
    1be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	3f ef       	ldi	r19, 0xFF	; 255
    1bea:	4f e7       	ldi	r20, 0x7F	; 127
    1bec:	57 e4       	ldi	r21, 0x47	; 71
    1bee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf2:	18 16       	cp	r1, r24
    1bf4:	4c f5       	brge	.+82     	; 0x1c48 <LCD_WriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e2       	ldi	r20, 0x20	; 32
    1c04:	51 e4       	ldi	r21, 0x41	; 65
    1c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	9e 83       	std	Y+6, r25	; 0x06
    1c1c:	8d 83       	std	Y+5, r24	; 0x05
    1c1e:	0f c0       	rjmp	.+30     	; 0x1c3e <LCD_WriteCommand+0xee>
    1c20:	89 e1       	ldi	r24, 0x19	; 25
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	9c 83       	std	Y+4, r25	; 0x04
    1c26:	8b 83       	std	Y+3, r24	; 0x03
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <LCD_WriteCommand+0xdc>
    1c30:	9c 83       	std	Y+4, r25	; 0x04
    1c32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c34:	8d 81       	ldd	r24, Y+5	; 0x05
    1c36:	9e 81       	ldd	r25, Y+6	; 0x06
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	9e 83       	std	Y+6, r25	; 0x06
    1c3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c40:	9e 81       	ldd	r25, Y+6	; 0x06
    1c42:	00 97       	sbiw	r24, 0x00	; 0
    1c44:	69 f7       	brne	.-38     	; 0x1c20 <LCD_WriteCommand+0xd0>
    1c46:	14 c0       	rjmp	.+40     	; 0x1c70 <LCD_WriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c48:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4a:	78 85       	ldd	r23, Y+8	; 0x08
    1c4c:	89 85       	ldd	r24, Y+9	; 0x09
    1c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	9e 83       	std	Y+6, r25	; 0x06
    1c5a:	8d 83       	std	Y+5, r24	; 0x05
    1c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c60:	9a 83       	std	Y+2, r25	; 0x02
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	9a 81       	ldd	r25, Y+2	; 0x02
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <LCD_WriteCommand+0x118>
    1c6c:	9a 83       	std	Y+2, r25	; 0x02
    1c6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	//RESET E1
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_E,LOW);
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	40 e0       	ldi	r20, 0x00	; 0
    1c76:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinValue>

}
    1c7a:	2f 96       	adiw	r28, 0x0f	; 15
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <LCD_WriteData>:

void LCD_WriteData(u8 LCD_Data)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	2f 97       	sbiw	r28, 0x0f	; 15
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
    1ca0:	8f 87       	std	Y+15, r24	; 0x0f
	//SET RS AND RESET RW
	DIO_SetPinValue(LCD_CONTROL_PORT,LCD_RS,HIGH);
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	62 e0       	ldi	r22, 0x02	; 2
    1ca6:	41 e0       	ldi	r20, 0x01	; 1
    1ca8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_PORT,LCD_RW,LOW);
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	61 e0       	ldi	r22, 0x01	; 1
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinValue>

	//SET PORT DATA COMMAND
	DIO_SetPortValue(LCD_DATA_PORT,LCD_Data);
    1cb6:	83 e0       	ldi	r24, 0x03	; 3
    1cb8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1cba:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_SetPortValue>

	//E1 FOR 1 MS
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_E,HIGH);
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	41 e0       	ldi	r20, 0x01	; 1
    1cc4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinValue>
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	a0 e8       	ldi	r26, 0x80	; 128
    1cce:	bf e3       	ldi	r27, 0x3F	; 63
    1cd0:	8b 87       	std	Y+11, r24	; 0x0b
    1cd2:	9c 87       	std	Y+12, r25	; 0x0c
    1cd4:	ad 87       	std	Y+13, r26	; 0x0d
    1cd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	4a e7       	ldi	r20, 0x7A	; 122
    1ce6:	53 e4       	ldi	r21, 0x43	; 67
    1ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	8f 83       	std	Y+7, r24	; 0x07
    1cf2:	98 87       	std	Y+8, r25	; 0x08
    1cf4:	a9 87       	std	Y+9, r26	; 0x09
    1cf6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cf8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfa:	78 85       	ldd	r23, Y+8	; 0x08
    1cfc:	89 85       	ldd	r24, Y+9	; 0x09
    1cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e8       	ldi	r20, 0x80	; 128
    1d06:	5f e3       	ldi	r21, 0x3F	; 63
    1d08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d0c:	88 23       	and	r24, r24
    1d0e:	2c f4       	brge	.+10     	; 0x1d1a <LCD_WriteData+0x8e>
		__ticks = 1;
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9e 83       	std	Y+6, r25	; 0x06
    1d16:	8d 83       	std	Y+5, r24	; 0x05
    1d18:	3f c0       	rjmp	.+126    	; 0x1d98 <LCD_WriteData+0x10c>
	else if (__tmp > 65535)
    1d1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1c:	78 85       	ldd	r23, Y+8	; 0x08
    1d1e:	89 85       	ldd	r24, Y+9	; 0x09
    1d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	3f ef       	ldi	r19, 0xFF	; 255
    1d26:	4f e7       	ldi	r20, 0x7F	; 127
    1d28:	57 e4       	ldi	r21, 0x47	; 71
    1d2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d2e:	18 16       	cp	r1, r24
    1d30:	4c f5       	brge	.+82     	; 0x1d84 <LCD_WriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e2       	ldi	r20, 0x20	; 32
    1d40:	51 e4       	ldi	r21, 0x41	; 65
    1d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	cd 01       	movw	r24, r26
    1d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	9e 83       	std	Y+6, r25	; 0x06
    1d58:	8d 83       	std	Y+5, r24	; 0x05
    1d5a:	0f c0       	rjmp	.+30     	; 0x1d7a <LCD_WriteData+0xee>
    1d5c:	89 e1       	ldi	r24, 0x19	; 25
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	9c 83       	std	Y+4, r25	; 0x04
    1d62:	8b 83       	std	Y+3, r24	; 0x03
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	f1 f7       	brne	.-4      	; 0x1d68 <LCD_WriteData+0xdc>
    1d6c:	9c 83       	std	Y+4, r25	; 0x04
    1d6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d70:	8d 81       	ldd	r24, Y+5	; 0x05
    1d72:	9e 81       	ldd	r25, Y+6	; 0x06
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	9e 83       	std	Y+6, r25	; 0x06
    1d78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	69 f7       	brne	.-38     	; 0x1d5c <LCD_WriteData+0xd0>
    1d82:	14 c0       	rjmp	.+40     	; 0x1dac <LCD_WriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d84:	6f 81       	ldd	r22, Y+7	; 0x07
    1d86:	78 85       	ldd	r23, Y+8	; 0x08
    1d88:	89 85       	ldd	r24, Y+9	; 0x09
    1d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	9e 83       	std	Y+6, r25	; 0x06
    1d96:	8d 83       	std	Y+5, r24	; 0x05
    1d98:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9c:	9a 83       	std	Y+2, r25	; 0x02
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	9a 81       	ldd	r25, Y+2	; 0x02
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <LCD_WriteData+0x118>
    1da8:	9a 83       	std	Y+2, r25	; 0x02
    1daa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	//RESET E1
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_E,LOW);
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	60 e0       	ldi	r22, 0x00	; 0
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinValue>
}
    1db6:	2f 96       	adiw	r28, 0x0f	; 15
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <LCD_Init>:


void LCD_Init()
{
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	cc 54       	subi	r28, 0x4C	; 76
    1dd6:	d0 40       	sbci	r29, 0x00	; 0
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	de bf       	out	0x3e, r29	; 62
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	cd bf       	out	0x3d, r28	; 61
	//INITIALIZE PORTS DIRECTION
	DIO_SetPortDirection(LCD_DATA_PORT,OUTPUT);
    1de2:	83 e0       	ldi	r24, 0x03	; 3
    1de4:	61 e0       	ldi	r22, 0x01	; 1
    1de6:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_SetPortDirection>
	DIO_SetPortDirection(LCD_CONTROL_PORT,OUTPUT);
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	61 e0       	ldi	r22, 0x01	; 1
    1dee:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_SetPortDirection>
    1df2:	fe 01       	movw	r30, r28
    1df4:	e7 5b       	subi	r30, 0xB7	; 183
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	a0 e2       	ldi	r26, 0x20	; 32
    1dfe:	b2 e4       	ldi	r27, 0x42	; 66
    1e00:	80 83       	st	Z, r24
    1e02:	91 83       	std	Z+1, r25	; 0x01
    1e04:	a2 83       	std	Z+2, r26	; 0x02
    1e06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e08:	8e 01       	movw	r16, r28
    1e0a:	0b 5b       	subi	r16, 0xBB	; 187
    1e0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0e:	fe 01       	movw	r30, r28
    1e10:	e7 5b       	subi	r30, 0xB7	; 183
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	60 81       	ld	r22, Z
    1e16:	71 81       	ldd	r23, Z+1	; 0x01
    1e18:	82 81       	ldd	r24, Z+2	; 0x02
    1e1a:	93 81       	ldd	r25, Z+3	; 0x03
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	4a e7       	ldi	r20, 0x7A	; 122
    1e22:	53 e4       	ldi	r21, 0x43	; 67
    1e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	f8 01       	movw	r30, r16
    1e2e:	80 83       	st	Z, r24
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	a2 83       	std	Z+2, r26	; 0x02
    1e34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e36:	fe 01       	movw	r30, r28
    1e38:	eb 5b       	subi	r30, 0xBB	; 187
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	60 81       	ld	r22, Z
    1e3e:	71 81       	ldd	r23, Z+1	; 0x01
    1e40:	82 81       	ldd	r24, Z+2	; 0x02
    1e42:	93 81       	ldd	r25, Z+3	; 0x03
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e8       	ldi	r20, 0x80	; 128
    1e4a:	5f e3       	ldi	r21, 0x3F	; 63
    1e4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e50:	88 23       	and	r24, r24
    1e52:	44 f4       	brge	.+16     	; 0x1e64 <LCD_Init+0x9c>
		__ticks = 1;
    1e54:	fe 01       	movw	r30, r28
    1e56:	ed 5b       	subi	r30, 0xBD	; 189
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	80 83       	st	Z, r24
    1e62:	64 c0       	rjmp	.+200    	; 0x1f2c <LCD_Init+0x164>
	else if (__tmp > 65535)
    1e64:	fe 01       	movw	r30, r28
    1e66:	eb 5b       	subi	r30, 0xBB	; 187
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	60 81       	ld	r22, Z
    1e6c:	71 81       	ldd	r23, Z+1	; 0x01
    1e6e:	82 81       	ldd	r24, Z+2	; 0x02
    1e70:	93 81       	ldd	r25, Z+3	; 0x03
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	3f ef       	ldi	r19, 0xFF	; 255
    1e76:	4f e7       	ldi	r20, 0x7F	; 127
    1e78:	57 e4       	ldi	r21, 0x47	; 71
    1e7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e7e:	18 16       	cp	r1, r24
    1e80:	0c f0       	brlt	.+2      	; 0x1e84 <LCD_Init+0xbc>
    1e82:	43 c0       	rjmp	.+134    	; 0x1f0a <LCD_Init+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e84:	fe 01       	movw	r30, r28
    1e86:	e7 5b       	subi	r30, 0xB7	; 183
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	60 81       	ld	r22, Z
    1e8c:	71 81       	ldd	r23, Z+1	; 0x01
    1e8e:	82 81       	ldd	r24, Z+2	; 0x02
    1e90:	93 81       	ldd	r25, Z+3	; 0x03
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e2       	ldi	r20, 0x20	; 32
    1e98:	51 e4       	ldi	r21, 0x41	; 65
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	8e 01       	movw	r16, r28
    1ea4:	0d 5b       	subi	r16, 0xBD	; 189
    1ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea8:	bc 01       	movw	r22, r24
    1eaa:	cd 01       	movw	r24, r26
    1eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	80 83       	st	Z, r24
    1eba:	1f c0       	rjmp	.+62     	; 0x1efa <LCD_Init+0x132>
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	ef 5b       	subi	r30, 0xBF	; 191
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	89 e1       	ldi	r24, 0x19	; 25
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	91 83       	std	Z+1, r25	; 0x01
    1ec8:	80 83       	st	Z, r24
    1eca:	fe 01       	movw	r30, r28
    1ecc:	ef 5b       	subi	r30, 0xBF	; 191
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 81       	ld	r24, Z
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	f1 f7       	brne	.-4      	; 0x1ed4 <LCD_Init+0x10c>
    1ed8:	fe 01       	movw	r30, r28
    1eda:	ef 5b       	subi	r30, 0xBF	; 191
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee2:	de 01       	movw	r26, r28
    1ee4:	ad 5b       	subi	r26, 0xBD	; 189
    1ee6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee8:	fe 01       	movw	r30, r28
    1eea:	ed 5b       	subi	r30, 0xBD	; 189
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	80 81       	ld	r24, Z
    1ef0:	91 81       	ldd	r25, Z+1	; 0x01
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	11 96       	adiw	r26, 0x01	; 1
    1ef6:	9c 93       	st	X, r25
    1ef8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efa:	fe 01       	movw	r30, r28
    1efc:	ed 5b       	subi	r30, 0xBD	; 189
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	80 81       	ld	r24, Z
    1f02:	91 81       	ldd	r25, Z+1	; 0x01
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	d1 f6       	brne	.-76     	; 0x1ebc <LCD_Init+0xf4>
    1f08:	24 c0       	rjmp	.+72     	; 0x1f52 <LCD_Init+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0a:	8e 01       	movw	r16, r28
    1f0c:	0d 5b       	subi	r16, 0xBD	; 189
    1f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f10:	fe 01       	movw	r30, r28
    1f12:	eb 5b       	subi	r30, 0xBB	; 187
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	60 81       	ld	r22, Z
    1f18:	71 81       	ldd	r23, Z+1	; 0x01
    1f1a:	82 81       	ldd	r24, Z+2	; 0x02
    1f1c:	93 81       	ldd	r25, Z+3	; 0x03
    1f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	f8 01       	movw	r30, r16
    1f28:	91 83       	std	Z+1, r25	; 0x01
    1f2a:	80 83       	st	Z, r24
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	ed 5b       	subi	r30, 0xBD	; 189
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	80 81       	ld	r24, Z
    1f34:	91 81       	ldd	r25, Z+1	; 0x01
    1f36:	fe 01       	movw	r30, r28
    1f38:	ff 96       	adiw	r30, 0x3f	; 63
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	80 83       	st	Z, r24
    1f3e:	fe 01       	movw	r30, r28
    1f40:	ff 96       	adiw	r30, 0x3f	; 63
    1f42:	80 81       	ld	r24, Z
    1f44:	91 81       	ldd	r25, Z+1	; 0x01
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <LCD_Init+0x17e>
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	ff 96       	adiw	r30, 0x3f	; 63
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	80 83       	st	Z, r24
	//DELAY FOR 40ms
	_delay_ms(40);
	//FUNCTION SET COMMAND
	LCD_WriteCommand(LCD_FUNCTION_SET);
    1f52:	8c e3       	ldi	r24, 0x3C	; 60
    1f54:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_WriteCommand>
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	a0 e2       	ldi	r26, 0x20	; 32
    1f5e:	b2 e4       	ldi	r27, 0x42	; 66
    1f60:	8b af       	std	Y+59, r24	; 0x3b
    1f62:	9c af       	std	Y+60, r25	; 0x3c
    1f64:	ad af       	std	Y+61, r26	; 0x3d
    1f66:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f68:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f6a:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f70:	2b ea       	ldi	r18, 0xAB	; 171
    1f72:	3a ea       	ldi	r19, 0xAA	; 170
    1f74:	4a ea       	ldi	r20, 0xAA	; 170
    1f76:	5e e3       	ldi	r21, 0x3E	; 62
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	8f ab       	std	Y+55, r24	; 0x37
    1f82:	98 af       	std	Y+56, r25	; 0x38
    1f84:	a9 af       	std	Y+57, r26	; 0x39
    1f86:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1f88:	6f a9       	ldd	r22, Y+55	; 0x37
    1f8a:	78 ad       	ldd	r23, Y+56	; 0x38
    1f8c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f8e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e8       	ldi	r20, 0x80	; 128
    1f96:	5f e3       	ldi	r21, 0x3F	; 63
    1f98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f9c:	88 23       	and	r24, r24
    1f9e:	1c f4       	brge	.+6      	; 0x1fa6 <LCD_Init+0x1de>
		__ticks = 1;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	8e ab       	std	Y+54, r24	; 0x36
    1fa4:	91 c0       	rjmp	.+290    	; 0x20c8 <LCD_Init+0x300>
	else if (__tmp > 255)
    1fa6:	6f a9       	ldd	r22, Y+55	; 0x37
    1fa8:	78 ad       	ldd	r23, Y+56	; 0x38
    1faa:	89 ad       	ldd	r24, Y+57	; 0x39
    1fac:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	4f e7       	ldi	r20, 0x7F	; 127
    1fb4:	53 e4       	ldi	r21, 0x43	; 67
    1fb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fba:	18 16       	cp	r1, r24
    1fbc:	0c f0       	brlt	.+2      	; 0x1fc0 <LCD_Init+0x1f8>
    1fbe:	7b c0       	rjmp	.+246    	; 0x20b6 <LCD_Init+0x2ee>
	{
		_delay_ms(__us / 1000.0);
    1fc0:	6b ad       	ldd	r22, Y+59	; 0x3b
    1fc2:	7c ad       	ldd	r23, Y+60	; 0x3c
    1fc4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fc6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	4a e7       	ldi	r20, 0x7A	; 122
    1fce:	54 e4       	ldi	r21, 0x44	; 68
    1fd0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	8a ab       	std	Y+50, r24	; 0x32
    1fda:	9b ab       	std	Y+51, r25	; 0x33
    1fdc:	ac ab       	std	Y+52, r26	; 0x34
    1fde:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe0:	6a a9       	ldd	r22, Y+50	; 0x32
    1fe2:	7b a9       	ldd	r23, Y+51	; 0x33
    1fe4:	8c a9       	ldd	r24, Y+52	; 0x34
    1fe6:	9d a9       	ldd	r25, Y+53	; 0x35
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	4a e7       	ldi	r20, 0x7A	; 122
    1fee:	53 e4       	ldi	r21, 0x43	; 67
    1ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	8e a7       	std	Y+46, r24	; 0x2e
    1ffa:	9f a7       	std	Y+47, r25	; 0x2f
    1ffc:	a8 ab       	std	Y+48, r26	; 0x30
    1ffe:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2000:	6e a5       	ldd	r22, Y+46	; 0x2e
    2002:	7f a5       	ldd	r23, Y+47	; 0x2f
    2004:	88 a9       	ldd	r24, Y+48	; 0x30
    2006:	99 a9       	ldd	r25, Y+49	; 0x31
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e8       	ldi	r20, 0x80	; 128
    200e:	5f e3       	ldi	r21, 0x3F	; 63
    2010:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2014:	88 23       	and	r24, r24
    2016:	2c f4       	brge	.+10     	; 0x2022 <LCD_Init+0x25a>
		__ticks = 1;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	9d a7       	std	Y+45, r25	; 0x2d
    201e:	8c a7       	std	Y+44, r24	; 0x2c
    2020:	3f c0       	rjmp	.+126    	; 0x20a0 <LCD_Init+0x2d8>
	else if (__tmp > 65535)
    2022:	6e a5       	ldd	r22, Y+46	; 0x2e
    2024:	7f a5       	ldd	r23, Y+47	; 0x2f
    2026:	88 a9       	ldd	r24, Y+48	; 0x30
    2028:	99 a9       	ldd	r25, Y+49	; 0x31
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	3f ef       	ldi	r19, 0xFF	; 255
    202e:	4f e7       	ldi	r20, 0x7F	; 127
    2030:	57 e4       	ldi	r21, 0x47	; 71
    2032:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2036:	18 16       	cp	r1, r24
    2038:	4c f5       	brge	.+82     	; 0x208c <LCD_Init+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203a:	6a a9       	ldd	r22, Y+50	; 0x32
    203c:	7b a9       	ldd	r23, Y+51	; 0x33
    203e:	8c a9       	ldd	r24, Y+52	; 0x34
    2040:	9d a9       	ldd	r25, Y+53	; 0x35
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e2       	ldi	r20, 0x20	; 32
    2048:	51 e4       	ldi	r21, 0x41	; 65
    204a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	bc 01       	movw	r22, r24
    2054:	cd 01       	movw	r24, r26
    2056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	9d a7       	std	Y+45, r25	; 0x2d
    2060:	8c a7       	std	Y+44, r24	; 0x2c
    2062:	0f c0       	rjmp	.+30     	; 0x2082 <LCD_Init+0x2ba>
    2064:	89 e1       	ldi	r24, 0x19	; 25
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	9b a7       	std	Y+43, r25	; 0x2b
    206a:	8a a7       	std	Y+42, r24	; 0x2a
    206c:	8a a5       	ldd	r24, Y+42	; 0x2a
    206e:	9b a5       	ldd	r25, Y+43	; 0x2b
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <LCD_Init+0x2a8>
    2074:	9b a7       	std	Y+43, r25	; 0x2b
    2076:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2078:	8c a5       	ldd	r24, Y+44	; 0x2c
    207a:	9d a5       	ldd	r25, Y+45	; 0x2d
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	9d a7       	std	Y+45, r25	; 0x2d
    2080:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2082:	8c a5       	ldd	r24, Y+44	; 0x2c
    2084:	9d a5       	ldd	r25, Y+45	; 0x2d
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	69 f7       	brne	.-38     	; 0x2064 <LCD_Init+0x29c>
    208a:	24 c0       	rjmp	.+72     	; 0x20d4 <LCD_Init+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208c:	6e a5       	ldd	r22, Y+46	; 0x2e
    208e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2090:	88 a9       	ldd	r24, Y+48	; 0x30
    2092:	99 a9       	ldd	r25, Y+49	; 0x31
    2094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	9d a7       	std	Y+45, r25	; 0x2d
    209e:	8c a7       	std	Y+44, r24	; 0x2c
    20a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    20a2:	9d a5       	ldd	r25, Y+45	; 0x2d
    20a4:	99 a7       	std	Y+41, r25	; 0x29
    20a6:	88 a7       	std	Y+40, r24	; 0x28
    20a8:	88 a5       	ldd	r24, Y+40	; 0x28
    20aa:	99 a5       	ldd	r25, Y+41	; 0x29
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <LCD_Init+0x2e4>
    20b0:	99 a7       	std	Y+41, r25	; 0x29
    20b2:	88 a7       	std	Y+40, r24	; 0x28
    20b4:	0f c0       	rjmp	.+30     	; 0x20d4 <LCD_Init+0x30c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20b6:	6f a9       	ldd	r22, Y+55	; 0x37
    20b8:	78 ad       	ldd	r23, Y+56	; 0x38
    20ba:	89 ad       	ldd	r24, Y+57	; 0x39
    20bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    20be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	8e ab       	std	Y+54, r24	; 0x36
    20c8:	8e a9       	ldd	r24, Y+54	; 0x36
    20ca:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20cc:	8f a1       	ldd	r24, Y+39	; 0x27
    20ce:	8a 95       	dec	r24
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <LCD_Init+0x306>
    20d2:	8f a3       	std	Y+39, r24	; 0x27
	//DELAY FOR 40US
	_delay_us(40);
	//DISPLAY ON
	LCD_WriteCommand(LCD_DISPLAY_ON);
    20d4:	8c e0       	ldi	r24, 0x0C	; 12
    20d6:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_WriteCommand>
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	a0 e2       	ldi	r26, 0x20	; 32
    20e0:	b2 e4       	ldi	r27, 0x42	; 66
    20e2:	8b a3       	std	Y+35, r24	; 0x23
    20e4:	9c a3       	std	Y+36, r25	; 0x24
    20e6:	ad a3       	std	Y+37, r26	; 0x25
    20e8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20ea:	6b a1       	ldd	r22, Y+35	; 0x23
    20ec:	7c a1       	ldd	r23, Y+36	; 0x24
    20ee:	8d a1       	ldd	r24, Y+37	; 0x25
    20f0:	9e a1       	ldd	r25, Y+38	; 0x26
    20f2:	2b ea       	ldi	r18, 0xAB	; 171
    20f4:	3a ea       	ldi	r19, 0xAA	; 170
    20f6:	4a ea       	ldi	r20, 0xAA	; 170
    20f8:	5e e3       	ldi	r21, 0x3E	; 62
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	8f 8f       	std	Y+31, r24	; 0x1f
    2104:	98 a3       	std	Y+32, r25	; 0x20
    2106:	a9 a3       	std	Y+33, r26	; 0x21
    2108:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    210a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    210c:	78 a1       	ldd	r23, Y+32	; 0x20
    210e:	89 a1       	ldd	r24, Y+33	; 0x21
    2110:	9a a1       	ldd	r25, Y+34	; 0x22
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e8       	ldi	r20, 0x80	; 128
    2118:	5f e3       	ldi	r21, 0x3F	; 63
    211a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    211e:	88 23       	and	r24, r24
    2120:	1c f4       	brge	.+6      	; 0x2128 <LCD_Init+0x360>
		__ticks = 1;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	8e 8f       	std	Y+30, r24	; 0x1e
    2126:	91 c0       	rjmp	.+290    	; 0x224a <LCD_Init+0x482>
	else if (__tmp > 255)
    2128:	6f 8d       	ldd	r22, Y+31	; 0x1f
    212a:	78 a1       	ldd	r23, Y+32	; 0x20
    212c:	89 a1       	ldd	r24, Y+33	; 0x21
    212e:	9a a1       	ldd	r25, Y+34	; 0x22
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4f e7       	ldi	r20, 0x7F	; 127
    2136:	53 e4       	ldi	r21, 0x43	; 67
    2138:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    213c:	18 16       	cp	r1, r24
    213e:	0c f0       	brlt	.+2      	; 0x2142 <LCD_Init+0x37a>
    2140:	7b c0       	rjmp	.+246    	; 0x2238 <LCD_Init+0x470>
	{
		_delay_ms(__us / 1000.0);
    2142:	6b a1       	ldd	r22, Y+35	; 0x23
    2144:	7c a1       	ldd	r23, Y+36	; 0x24
    2146:	8d a1       	ldd	r24, Y+37	; 0x25
    2148:	9e a1       	ldd	r25, Y+38	; 0x26
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4a e7       	ldi	r20, 0x7A	; 122
    2150:	54 e4       	ldi	r21, 0x44	; 68
    2152:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	8a 8f       	std	Y+26, r24	; 0x1a
    215c:	9b 8f       	std	Y+27, r25	; 0x1b
    215e:	ac 8f       	std	Y+28, r26	; 0x1c
    2160:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2162:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2164:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2166:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2168:	9d 8d       	ldd	r25, Y+29	; 0x1d
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	4a e7       	ldi	r20, 0x7A	; 122
    2170:	53 e4       	ldi	r21, 0x43	; 67
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	8e 8b       	std	Y+22, r24	; 0x16
    217c:	9f 8b       	std	Y+23, r25	; 0x17
    217e:	a8 8f       	std	Y+24, r26	; 0x18
    2180:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2182:	6e 89       	ldd	r22, Y+22	; 0x16
    2184:	7f 89       	ldd	r23, Y+23	; 0x17
    2186:	88 8d       	ldd	r24, Y+24	; 0x18
    2188:	99 8d       	ldd	r25, Y+25	; 0x19
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e8       	ldi	r20, 0x80	; 128
    2190:	5f e3       	ldi	r21, 0x3F	; 63
    2192:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2196:	88 23       	and	r24, r24
    2198:	2c f4       	brge	.+10     	; 0x21a4 <LCD_Init+0x3dc>
		__ticks = 1;
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	9d 8b       	std	Y+21, r25	; 0x15
    21a0:	8c 8b       	std	Y+20, r24	; 0x14
    21a2:	3f c0       	rjmp	.+126    	; 0x2222 <LCD_Init+0x45a>
	else if (__tmp > 65535)
    21a4:	6e 89       	ldd	r22, Y+22	; 0x16
    21a6:	7f 89       	ldd	r23, Y+23	; 0x17
    21a8:	88 8d       	ldd	r24, Y+24	; 0x18
    21aa:	99 8d       	ldd	r25, Y+25	; 0x19
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	3f ef       	ldi	r19, 0xFF	; 255
    21b0:	4f e7       	ldi	r20, 0x7F	; 127
    21b2:	57 e4       	ldi	r21, 0x47	; 71
    21b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b8:	18 16       	cp	r1, r24
    21ba:	4c f5       	brge	.+82     	; 0x220e <LCD_Init+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21bc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    21be:	7b 8d       	ldd	r23, Y+27	; 0x1b
    21c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21c2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e2       	ldi	r20, 0x20	; 32
    21ca:	51 e4       	ldi	r21, 0x41	; 65
    21cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	bc 01       	movw	r22, r24
    21d6:	cd 01       	movw	r24, r26
    21d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	9d 8b       	std	Y+21, r25	; 0x15
    21e2:	8c 8b       	std	Y+20, r24	; 0x14
    21e4:	0f c0       	rjmp	.+30     	; 0x2204 <LCD_Init+0x43c>
    21e6:	89 e1       	ldi	r24, 0x19	; 25
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	9b 8b       	std	Y+19, r25	; 0x13
    21ec:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21ee:	8a 89       	ldd	r24, Y+18	; 0x12
    21f0:	9b 89       	ldd	r25, Y+19	; 0x13
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <LCD_Init+0x42a>
    21f6:	9b 8b       	std	Y+19, r25	; 0x13
    21f8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fa:	8c 89       	ldd	r24, Y+20	; 0x14
    21fc:	9d 89       	ldd	r25, Y+21	; 0x15
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	9d 8b       	std	Y+21, r25	; 0x15
    2202:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2204:	8c 89       	ldd	r24, Y+20	; 0x14
    2206:	9d 89       	ldd	r25, Y+21	; 0x15
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	69 f7       	brne	.-38     	; 0x21e6 <LCD_Init+0x41e>
    220c:	24 c0       	rjmp	.+72     	; 0x2256 <LCD_Init+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220e:	6e 89       	ldd	r22, Y+22	; 0x16
    2210:	7f 89       	ldd	r23, Y+23	; 0x17
    2212:	88 8d       	ldd	r24, Y+24	; 0x18
    2214:	99 8d       	ldd	r25, Y+25	; 0x19
    2216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	9d 8b       	std	Y+21, r25	; 0x15
    2220:	8c 8b       	std	Y+20, r24	; 0x14
    2222:	8c 89       	ldd	r24, Y+20	; 0x14
    2224:	9d 89       	ldd	r25, Y+21	; 0x15
    2226:	99 8b       	std	Y+17, r25	; 0x11
    2228:	88 8b       	std	Y+16, r24	; 0x10
    222a:	88 89       	ldd	r24, Y+16	; 0x10
    222c:	99 89       	ldd	r25, Y+17	; 0x11
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	f1 f7       	brne	.-4      	; 0x222e <LCD_Init+0x466>
    2232:	99 8b       	std	Y+17, r25	; 0x11
    2234:	88 8b       	std	Y+16, r24	; 0x10
    2236:	0f c0       	rjmp	.+30     	; 0x2256 <LCD_Init+0x48e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2238:	6f 8d       	ldd	r22, Y+31	; 0x1f
    223a:	78 a1       	ldd	r23, Y+32	; 0x20
    223c:	89 a1       	ldd	r24, Y+33	; 0x21
    223e:	9a a1       	ldd	r25, Y+34	; 0x22
    2240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	8e 8f       	std	Y+30, r24	; 0x1e
    224a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    224c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    224e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2250:	8a 95       	dec	r24
    2252:	f1 f7       	brne	.-4      	; 0x2250 <LCD_Init+0x488>
    2254:	8f 87       	std	Y+15, r24	; 0x0f
	//DELAY FOR 40US
	_delay_us(40);
	//DISPLAY CLEAR
	LCD_WriteCommand(LCD_DISPLAY_CLEAR);
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_WriteCommand>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a0 e0       	ldi	r26, 0x00	; 0
    2262:	b0 e4       	ldi	r27, 0x40	; 64
    2264:	8b 87       	std	Y+11, r24	; 0x0b
    2266:	9c 87       	std	Y+12, r25	; 0x0c
    2268:	ad 87       	std	Y+13, r26	; 0x0d
    226a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226c:	6b 85       	ldd	r22, Y+11	; 0x0b
    226e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2270:	8d 85       	ldd	r24, Y+13	; 0x0d
    2272:	9e 85       	ldd	r25, Y+14	; 0x0e
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a e7       	ldi	r20, 0x7A	; 122
    227a:	53 e4       	ldi	r21, 0x43	; 67
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	8f 83       	std	Y+7, r24	; 0x07
    2286:	98 87       	std	Y+8, r25	; 0x08
    2288:	a9 87       	std	Y+9, r26	; 0x09
    228a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    228c:	6f 81       	ldd	r22, Y+7	; 0x07
    228e:	78 85       	ldd	r23, Y+8	; 0x08
    2290:	89 85       	ldd	r24, Y+9	; 0x09
    2292:	9a 85       	ldd	r25, Y+10	; 0x0a
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	2c f4       	brge	.+10     	; 0x22ae <LCD_Init+0x4e6>
		__ticks = 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9e 83       	std	Y+6, r25	; 0x06
    22aa:	8d 83       	std	Y+5, r24	; 0x05
    22ac:	3f c0       	rjmp	.+126    	; 0x232c <LCD_Init+0x564>
	else if (__tmp > 65535)
    22ae:	6f 81       	ldd	r22, Y+7	; 0x07
    22b0:	78 85       	ldd	r23, Y+8	; 0x08
    22b2:	89 85       	ldd	r24, Y+9	; 0x09
    22b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	3f ef       	ldi	r19, 0xFF	; 255
    22ba:	4f e7       	ldi	r20, 0x7F	; 127
    22bc:	57 e4       	ldi	r21, 0x47	; 71
    22be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	4c f5       	brge	.+82     	; 0x2318 <LCD_Init+0x550>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    22cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9e 83       	std	Y+6, r25	; 0x06
    22ec:	8d 83       	std	Y+5, r24	; 0x05
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <LCD_Init+0x546>
    22f0:	89 e1       	ldi	r24, 0x19	; 25
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9c 83       	std	Y+4, r25	; 0x04
    22f6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <LCD_Init+0x534>
    2300:	9c 83       	std	Y+4, r25	; 0x04
    2302:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	9e 81       	ldd	r25, Y+6	; 0x06
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	9e 83       	std	Y+6, r25	; 0x06
    230c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f7       	brne	.-38     	; 0x22f0 <LCD_Init+0x528>
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <LCD_Init+0x578>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	6f 81       	ldd	r22, Y+7	; 0x07
    231a:	78 85       	ldd	r23, Y+8	; 0x08
    231c:	89 85       	ldd	r24, Y+9	; 0x09
    231e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	9e 83       	std	Y+6, r25	; 0x06
    232a:	8d 83       	std	Y+5, r24	; 0x05
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	9a 83       	std	Y+2, r25	; 0x02
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <LCD_Init+0x570>
    233c:	9a 83       	std	Y+2, r25	; 0x02
    233e:	89 83       	std	Y+1, r24	; 0x01
	//WAIT FOR 2MS
	_delay_ms(2);
	//entry mode
	LCD_WriteCommand(LCD_ENTRY_MODE_INCREMENT_NOSHIFT);
    2340:	86 e0       	ldi	r24, 0x06	; 6
    2342:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_WriteCommand>

}
    2346:	c4 5b       	subi	r28, 0xB4	; 180
    2348:	df 4f       	sbci	r29, 0xFF	; 255
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	08 95       	ret

0000235e <LCD_WriteNum>:


void LCD_WriteNum(u32 Num, u8 dp)
{
    235e:	0f 93       	push	r16
    2360:	1f 93       	push	r17
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	63 97       	sbiw	r28, 0x13	; 19
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	69 87       	std	Y+9, r22	; 0x09
    2378:	7a 87       	std	Y+10, r23	; 0x0a
    237a:	8b 87       	std	Y+11, r24	; 0x0b
    237c:	9c 87       	std	Y+12, r25	; 0x0c
    237e:	4d 87       	std	Y+13, r20	; 0x0d
		if(dp && dp == i)
		{
			LCD_WriteChar(0xA5);
		}
	}
}
    2380:	2d b7       	in	r18, 0x3d	; 61
    2382:	3e b7       	in	r19, 0x3e	; 62
    2384:	3b 8b       	std	Y+19, r19	; 0x13
    2386:	2a 8b       	std	Y+18, r18	; 0x12

}


void LCD_WriteNum(u32 Num, u8 dp)
{
    2388:	8d b7       	in	r24, 0x3d	; 61
    238a:	9e b7       	in	r25, 0x3e	; 62
    238c:	9f 87       	std	Y+15, r25	; 0x0f
    238e:	8e 87       	std	Y+14, r24	; 0x0e
	u16 Val = Num;
    2390:	89 85       	ldd	r24, Y+9	; 0x09
    2392:	9a 85       	ldd	r25, Y+10	; 0x0a
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
	u16 n = 0;
    2398:	1c 82       	std	Y+4, r1	; 0x04
    239a:	1b 82       	std	Y+3, r1	; 0x03
    239c:	0f c0       	rjmp	.+30     	; 0x23bc <LCD_WriteNum+0x5e>
	while(Val > 0)
	{
		n++;
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	9c 81       	ldd	r25, Y+4	; 0x04
    23a2:	01 96       	adiw	r24, 0x01	; 1
    23a4:	9c 83       	std	Y+4, r25	; 0x04
    23a6:	8b 83       	std	Y+3, r24	; 0x03
		Val = Val / 10;
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	2a e0       	ldi	r18, 0x0A	; 10
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	b9 01       	movw	r22, r18
    23b2:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__udivmodhi4>
    23b6:	cb 01       	movw	r24, r22
    23b8:	9e 83       	std	Y+6, r25	; 0x06
    23ba:	8d 83       	std	Y+5, r24	; 0x05

void LCD_WriteNum(u32 Num, u8 dp)
{
	u16 Val = Num;
	u16 n = 0;
	while(Val > 0)
    23bc:	8d 81       	ldd	r24, Y+5	; 0x05
    23be:	9e 81       	ldd	r25, Y+6	; 0x06
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	69 f7       	brne	.-38     	; 0x239e <LCD_WriteNum+0x40>
	{
		n++;
		Val = Val / 10;
	}
	u16 num_array[n];
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	9c 81       	ldd	r25, Y+4	; 0x04
    23c8:	88 0f       	add	r24, r24
    23ca:	99 1f       	adc	r25, r25
    23cc:	2d b7       	in	r18, 0x3d	; 61
    23ce:	3e b7       	in	r19, 0x3e	; 62
    23d0:	28 1b       	sub	r18, r24
    23d2:	39 0b       	sbc	r19, r25
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	3e bf       	out	0x3e, r19	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	2d bf       	out	0x3d, r18	; 61
    23de:	8d b7       	in	r24, 0x3d	; 61
    23e0:	9e b7       	in	r25, 0x3e	; 62
    23e2:	01 96       	adiw	r24, 0x01	; 1
    23e4:	99 8b       	std	Y+17, r25	; 0x11
    23e6:	88 8b       	std	Y+16, r24	; 0x10
    23e8:	88 89       	ldd	r24, Y+16	; 0x10
    23ea:	99 89       	ldd	r25, Y+17	; 0x11
    23ec:	00 96       	adiw	r24, 0x00	; 0
    23ee:	99 8b       	std	Y+17, r25	; 0x11
    23f0:	88 8b       	std	Y+16, r24	; 0x10
    23f2:	28 89       	ldd	r18, Y+16	; 0x10
    23f4:	39 89       	ldd	r19, Y+17	; 0x11
    23f6:	38 87       	std	Y+8, r19	; 0x08
    23f8:	2f 83       	std	Y+7, r18	; 0x07
	s16 i = 0;
    23fa:	1a 82       	std	Y+2, r1	; 0x02
    23fc:	19 82       	std	Y+1, r1	; 0x01
    23fe:	34 c0       	rjmp	.+104    	; 0x2468 <LCD_WriteNum+0x10a>
	while(Num > 0)
	{
		num_array[i] = (Num%10) + 48;
    2400:	09 81       	ldd	r16, Y+1	; 0x01
    2402:	1a 81       	ldd	r17, Y+2	; 0x02
    2404:	89 85       	ldd	r24, Y+9	; 0x09
    2406:	9a 85       	ldd	r25, Y+10	; 0x0a
    2408:	ab 85       	ldd	r26, Y+11	; 0x0b
    240a:	bc 85       	ldd	r27, Y+12	; 0x0c
    240c:	2a e0       	ldi	r18, 0x0A	; 10
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e0       	ldi	r20, 0x00	; 0
    2412:	50 e0       	ldi	r21, 0x00	; 0
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__udivmodsi4>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	ac 01       	movw	r20, r24
    2422:	40 5d       	subi	r20, 0xD0	; 208
    2424:	5f 4f       	sbci	r21, 0xFF	; 255
    2426:	2f 81       	ldd	r18, Y+7	; 0x07
    2428:	38 85       	ldd	r19, Y+8	; 0x08
    242a:	c8 01       	movw	r24, r16
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	f9 01       	movw	r30, r18
    2432:	e8 0f       	add	r30, r24
    2434:	f9 1f       	adc	r31, r25
    2436:	51 83       	std	Z+1, r21	; 0x01
    2438:	40 83       	st	Z, r20
		Num = Num / 10;
    243a:	89 85       	ldd	r24, Y+9	; 0x09
    243c:	9a 85       	ldd	r25, Y+10	; 0x0a
    243e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2440:	bc 85       	ldd	r27, Y+12	; 0x0c
    2442:	2a e0       	ldi	r18, 0x0A	; 10
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e0       	ldi	r20, 0x00	; 0
    2448:	50 e0       	ldi	r21, 0x00	; 0
    244a:	bc 01       	movw	r22, r24
    244c:	cd 01       	movw	r24, r26
    244e:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__udivmodsi4>
    2452:	da 01       	movw	r26, r20
    2454:	c9 01       	movw	r24, r18
    2456:	89 87       	std	Y+9, r24	; 0x09
    2458:	9a 87       	std	Y+10, r25	; 0x0a
    245a:	ab 87       	std	Y+11, r26	; 0x0b
    245c:	bc 87       	std	Y+12, r27	; 0x0c
		i++;
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	9a 81       	ldd	r25, Y+2	; 0x02
    2462:	01 96       	adiw	r24, 0x01	; 1
    2464:	9a 83       	std	Y+2, r25	; 0x02
    2466:	89 83       	std	Y+1, r24	; 0x01
		n++;
		Val = Val / 10;
	}
	u16 num_array[n];
	s16 i = 0;
	while(Num > 0)
    2468:	89 85       	ldd	r24, Y+9	; 0x09
    246a:	9a 85       	ldd	r25, Y+10	; 0x0a
    246c:	ab 85       	ldd	r26, Y+11	; 0x0b
    246e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2470:	00 97       	sbiw	r24, 0x00	; 0
    2472:	a1 05       	cpc	r26, r1
    2474:	b1 05       	cpc	r27, r1
    2476:	21 f6       	brne	.-120    	; 0x2400 <LCD_WriteNum+0xa2>
	{
		num_array[i] = (Num%10) + 48;
		Num = Num / 10;
		i++;
	}
	for(i=(n-1);i>=0;i--)
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	9c 81       	ldd	r25, Y+4	; 0x04
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	9a 83       	std	Y+2, r25	; 0x02
    2480:	89 83       	std	Y+1, r24	; 0x01
    2482:	20 c0       	rjmp	.+64     	; 0x24c4 <LCD_WriteNum+0x166>
	{
		LCD_WriteChar(num_array[i]);
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	9a 81       	ldd	r25, Y+2	; 0x02
    2488:	2f 81       	ldd	r18, Y+7	; 0x07
    248a:	38 85       	ldd	r19, Y+8	; 0x08
    248c:	88 0f       	add	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	f9 01       	movw	r30, r18
    2492:	e8 0f       	add	r30, r24
    2494:	f9 1f       	adc	r31, r25
    2496:	80 81       	ld	r24, Z
    2498:	91 81       	ldd	r25, Z+1	; 0x01
    249a:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_WriteChar>
		if(dp && dp == i)
    249e:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a0:	88 23       	and	r24, r24
    24a2:	59 f0       	breq	.+22     	; 0x24ba <LCD_WriteNum+0x15c>
    24a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	9a 81       	ldd	r25, Y+2	; 0x02
    24ae:	28 17       	cp	r18, r24
    24b0:	39 07       	cpc	r19, r25
    24b2:	19 f4       	brne	.+6      	; 0x24ba <LCD_WriteNum+0x15c>
		{
			LCD_WriteChar(0xA5);
    24b4:	85 ea       	ldi	r24, 0xA5	; 165
    24b6:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_WriteChar>
	{
		num_array[i] = (Num%10) + 48;
		Num = Num / 10;
		i++;
	}
	for(i=(n-1);i>=0;i--)
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	9a 81       	ldd	r25, Y+2	; 0x02
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	9a 83       	std	Y+2, r25	; 0x02
    24c2:	89 83       	std	Y+1, r24	; 0x01
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	9a 81       	ldd	r25, Y+2	; 0x02
    24c8:	99 23       	and	r25, r25
    24ca:	e4 f6       	brge	.-72     	; 0x2484 <LCD_WriteNum+0x126>
    24cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    24ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	9e bf       	out	0x3e, r25	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	8d bf       	out	0x3d, r24	; 61
		if(dp && dp == i)
		{
			LCD_WriteChar(0xA5);
		}
	}
}
    24da:	2a 89       	ldd	r18, Y+18	; 0x12
    24dc:	3b 89       	ldd	r19, Y+19	; 0x13
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	f8 94       	cli
    24e2:	3e bf       	out	0x3e, r19	; 62
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	2d bf       	out	0x3d, r18	; 61
    24e8:	63 96       	adiw	r28, 0x13	; 19
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	1f 91       	pop	r17
    24fa:	0f 91       	pop	r16
    24fc:	08 95       	ret

000024fe <LCD_WriteStr>:

void LCD_WriteStr(u8 str[])
{
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	00 d0       	rcall	.+0      	; 0x2504 <LCD_WriteStr+0x6>
    2504:	00 d0       	rcall	.+0      	; 0x2506 <LCD_WriteStr+0x8>
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	9c 83       	std	Y+4, r25	; 0x04
    250c:	8b 83       	std	Y+3, r24	; 0x03

	u16 i;
	for(i=0;i<strlen(str);i++)
    250e:	1a 82       	std	Y+2, r1	; 0x02
    2510:	19 82       	std	Y+1, r1	; 0x01
    2512:	0f c0       	rjmp	.+30     	; 0x2532 <LCD_WriteStr+0x34>
	{
		LCD_WriteChar(str[i]);
    2514:	2b 81       	ldd	r18, Y+3	; 0x03
    2516:	3c 81       	ldd	r19, Y+4	; 0x04
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	9a 81       	ldd	r25, Y+2	; 0x02
    251c:	f9 01       	movw	r30, r18
    251e:	e8 0f       	add	r30, r24
    2520:	f9 1f       	adc	r31, r25
    2522:	80 81       	ld	r24, Z
    2524:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_WriteChar>

void LCD_WriteStr(u8 str[])
{

	u16 i;
	for(i=0;i<strlen(str);i++)
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	9a 81       	ldd	r25, Y+2	; 0x02
    252c:	01 96       	adiw	r24, 0x01	; 1
    252e:	9a 83       	std	Y+2, r25	; 0x02
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	9c 81       	ldd	r25, Y+4	; 0x04
    2536:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <strlen>
    253a:	9c 01       	movw	r18, r24
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	9a 81       	ldd	r25, Y+2	; 0x02
    2540:	82 17       	cp	r24, r18
    2542:	93 07       	cpc	r25, r19
    2544:	38 f3       	brcs	.-50     	; 0x2514 <LCD_WriteStr+0x16>
	{
		LCD_WriteChar(str[i]);
	}

}
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <LCD_SetCursor>:

void LCD_SetCursor(u8 X,u8 Y)
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	00 d0       	rcall	.+0      	; 0x255a <LCD_SetCursor+0x6>
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	89 83       	std	Y+1, r24	; 0x01
    2560:	6a 83       	std	Y+2, r22	; 0x02
	LCD_WriteCommand((X+LCD_START_POS)+(LCD_VERTICAL_INCREMENT*Y));
    2562:	8a 81       	ldd	r24, Y+2	; 0x02
    2564:	88 2f       	mov	r24, r24
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	00 24       	eor	r0, r0
    256a:	96 95       	lsr	r25
    256c:	87 95       	ror	r24
    256e:	07 94       	ror	r0
    2570:	96 95       	lsr	r25
    2572:	87 95       	ror	r24
    2574:	07 94       	ror	r0
    2576:	98 2f       	mov	r25, r24
    2578:	80 2d       	mov	r24, r0
    257a:	98 2f       	mov	r25, r24
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	89 0f       	add	r24, r25
    2580:	80 58       	subi	r24, 0x80	; 128
    2582:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_WriteCommand>
}
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <LCD_CustomCharsInit>:


void LCD_CustomCharsInit()
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
//	for(i=0;i<sizeof(LCD_ExtraChars);i++)
//	{
//		LCD_WriteChar(LCD_ExtraChars[i]);
//	}

}
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	08 95       	ret

0000259e <LCD_WriteStrSin>:


void LCD_WriteStrSin(u8 LCD_STR[], u8 NumOfIterations)
{
    259e:	0f 93       	push	r16
    25a0:	1f 93       	push	r17
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	66 97       	sbiw	r28, 0x16	; 22
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	f8 94       	cli
    25b0:	de bf       	out	0x3e, r29	; 62
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	cd bf       	out	0x3d, r28	; 61
    25b6:	9c 8b       	std	Y+20, r25	; 0x14
    25b8:	8b 8b       	std	Y+19, r24	; 0x13
    25ba:	6d 8b       	std	Y+21, r22	; 0x15
	u8 i,j,cursor_x;
	u8 toggle = 0;
    25bc:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;i<NumOfIterations;i++)
    25be:	1a 8a       	std	Y+18, r1	; 0x12
    25c0:	af c0       	rjmp	.+350    	; 0x2720 <LCD_WriteStrSin+0x182>
	{
		LCD_WriteCommand(LCD_DISPLAY_CLEAR);
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_WriteCommand>
		cursor_x = i;
    25c8:	8a 89       	ldd	r24, Y+18	; 0x12
    25ca:	88 8b       	std	Y+16, r24	; 0x10
		for(j=0;j<strlen(LCD_STR);j++)
    25cc:	19 8a       	std	Y+17, r1	; 0x11
    25ce:	29 c0       	rjmp	.+82     	; 0x2622 <LCD_WriteStrSin+0x84>
//			{
//				LCD_SetCursor(cursor_x,1);
//			}

			//word swap
			if(LCD_STR[j] == ' ')
    25d0:	89 89       	ldd	r24, Y+17	; 0x11
    25d2:	28 2f       	mov	r18, r24
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	8b 89       	ldd	r24, Y+19	; 0x13
    25d8:	9c 89       	ldd	r25, Y+20	; 0x14
    25da:	fc 01       	movw	r30, r24
    25dc:	e2 0f       	add	r30, r18
    25de:	f3 1f       	adc	r31, r19
    25e0:	80 81       	ld	r24, Z
    25e2:	80 32       	cpi	r24, 0x20	; 32
    25e4:	49 f4       	brne	.+18     	; 0x25f8 <LCD_WriteStrSin+0x5a>
			{
				toggle=!toggle;
    25e6:	1e 8a       	std	Y+22, r1	; 0x16
    25e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ea:	88 23       	and	r24, r24
    25ec:	11 f4       	brne	.+4      	; 0x25f2 <LCD_WriteStrSin+0x54>
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	8e 8b       	std	Y+22, r24	; 0x16
    25f2:	8e 89       	ldd	r24, Y+22	; 0x16
    25f4:	8f 87       	std	Y+15, r24	; 0x0f
    25f6:	12 c0       	rjmp	.+36     	; 0x261c <LCD_WriteStrSin+0x7e>
			}
			else
			{
				LCD_SetCursor(cursor_x,toggle);
    25f8:	88 89       	ldd	r24, Y+16	; 0x10
    25fa:	6f 85       	ldd	r22, Y+15	; 0x0f
    25fc:	0e 94 aa 12 	call	0x2554	; 0x2554 <LCD_SetCursor>
				cursor_x++;
    2600:	88 89       	ldd	r24, Y+16	; 0x10
    2602:	8f 5f       	subi	r24, 0xFF	; 255
    2604:	88 8b       	std	Y+16, r24	; 0x10
				LCD_WriteChar(LCD_STR[j]);
    2606:	89 89       	ldd	r24, Y+17	; 0x11
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	8b 89       	ldd	r24, Y+19	; 0x13
    260e:	9c 89       	ldd	r25, Y+20	; 0x14
    2610:	fc 01       	movw	r30, r24
    2612:	e2 0f       	add	r30, r18
    2614:	f3 1f       	adc	r31, r19
    2616:	80 81       	ld	r24, Z
    2618:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_WriteChar>
	u8 toggle = 0;
	for(i=0;i<NumOfIterations;i++)
	{
		LCD_WriteCommand(LCD_DISPLAY_CLEAR);
		cursor_x = i;
		for(j=0;j<strlen(LCD_STR);j++)
    261c:	89 89       	ldd	r24, Y+17	; 0x11
    261e:	8f 5f       	subi	r24, 0xFF	; 255
    2620:	89 8b       	std	Y+17, r24	; 0x11
    2622:	89 89       	ldd	r24, Y+17	; 0x11
    2624:	08 2f       	mov	r16, r24
    2626:	10 e0       	ldi	r17, 0x00	; 0
    2628:	8b 89       	ldd	r24, Y+19	; 0x13
    262a:	9c 89       	ldd	r25, Y+20	; 0x14
    262c:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <strlen>
    2630:	08 17       	cp	r16, r24
    2632:	19 07       	cpc	r17, r25
    2634:	68 f2       	brcs	.-102    	; 0x25d0 <LCD_WriteStrSin+0x32>
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	aa ef       	ldi	r26, 0xFA	; 250
    263c:	b3 e4       	ldi	r27, 0x43	; 67
    263e:	8b 87       	std	Y+11, r24	; 0x0b
    2640:	9c 87       	std	Y+12, r25	; 0x0c
    2642:	ad 87       	std	Y+13, r26	; 0x0d
    2644:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2646:	6b 85       	ldd	r22, Y+11	; 0x0b
    2648:	7c 85       	ldd	r23, Y+12	; 0x0c
    264a:	8d 85       	ldd	r24, Y+13	; 0x0d
    264c:	9e 85       	ldd	r25, Y+14	; 0x0e
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	4a e7       	ldi	r20, 0x7A	; 122
    2654:	53 e4       	ldi	r21, 0x43	; 67
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	8f 83       	std	Y+7, r24	; 0x07
    2660:	98 87       	std	Y+8, r25	; 0x08
    2662:	a9 87       	std	Y+9, r26	; 0x09
    2664:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2666:	6f 81       	ldd	r22, Y+7	; 0x07
    2668:	78 85       	ldd	r23, Y+8	; 0x08
    266a:	89 85       	ldd	r24, Y+9	; 0x09
    266c:	9a 85       	ldd	r25, Y+10	; 0x0a
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e8       	ldi	r20, 0x80	; 128
    2674:	5f e3       	ldi	r21, 0x3F	; 63
    2676:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    267a:	88 23       	and	r24, r24
    267c:	2c f4       	brge	.+10     	; 0x2688 <LCD_WriteStrSin+0xea>
		__ticks = 1;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	9e 83       	std	Y+6, r25	; 0x06
    2684:	8d 83       	std	Y+5, r24	; 0x05
    2686:	3f c0       	rjmp	.+126    	; 0x2706 <LCD_WriteStrSin+0x168>
	else if (__tmp > 65535)
    2688:	6f 81       	ldd	r22, Y+7	; 0x07
    268a:	78 85       	ldd	r23, Y+8	; 0x08
    268c:	89 85       	ldd	r24, Y+9	; 0x09
    268e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	3f ef       	ldi	r19, 0xFF	; 255
    2694:	4f e7       	ldi	r20, 0x7F	; 127
    2696:	57 e4       	ldi	r21, 0x47	; 71
    2698:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    269c:	18 16       	cp	r1, r24
    269e:	4c f5       	brge	.+82     	; 0x26f2 <LCD_WriteStrSin+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e2       	ldi	r20, 0x20	; 32
    26ae:	51 e4       	ldi	r21, 0x41	; 65
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	bc 01       	movw	r22, r24
    26ba:	cd 01       	movw	r24, r26
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9e 83       	std	Y+6, r25	; 0x06
    26c6:	8d 83       	std	Y+5, r24	; 0x05
    26c8:	0f c0       	rjmp	.+30     	; 0x26e8 <LCD_WriteStrSin+0x14a>
    26ca:	89 e1       	ldi	r24, 0x19	; 25
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	9c 83       	std	Y+4, r25	; 0x04
    26d0:	8b 83       	std	Y+3, r24	; 0x03
    26d2:	8b 81       	ldd	r24, Y+3	; 0x03
    26d4:	9c 81       	ldd	r25, Y+4	; 0x04
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <LCD_WriteStrSin+0x138>
    26da:	9c 83       	std	Y+4, r25	; 0x04
    26dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26de:	8d 81       	ldd	r24, Y+5	; 0x05
    26e0:	9e 81       	ldd	r25, Y+6	; 0x06
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	9e 83       	std	Y+6, r25	; 0x06
    26e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ea:	9e 81       	ldd	r25, Y+6	; 0x06
    26ec:	00 97       	sbiw	r24, 0x00	; 0
    26ee:	69 f7       	brne	.-38     	; 0x26ca <LCD_WriteStrSin+0x12c>
    26f0:	14 c0       	rjmp	.+40     	; 0x271a <LCD_WriteStrSin+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f2:	6f 81       	ldd	r22, Y+7	; 0x07
    26f4:	78 85       	ldd	r23, Y+8	; 0x08
    26f6:	89 85       	ldd	r24, Y+9	; 0x09
    26f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	9e 83       	std	Y+6, r25	; 0x06
    2704:	8d 83       	std	Y+5, r24	; 0x05
    2706:	8d 81       	ldd	r24, Y+5	; 0x05
    2708:	9e 81       	ldd	r25, Y+6	; 0x06
    270a:	9a 83       	std	Y+2, r25	; 0x02
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	9a 81       	ldd	r25, Y+2	; 0x02
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	f1 f7       	brne	.-4      	; 0x2712 <LCD_WriteStrSin+0x174>
    2716:	9a 83       	std	Y+2, r25	; 0x02
    2718:	89 83       	std	Y+1, r24	; 0x01

void LCD_WriteStrSin(u8 LCD_STR[], u8 NumOfIterations)
{
	u8 i,j,cursor_x;
	u8 toggle = 0;
	for(i=0;i<NumOfIterations;i++)
    271a:	8a 89       	ldd	r24, Y+18	; 0x12
    271c:	8f 5f       	subi	r24, 0xFF	; 255
    271e:	8a 8b       	std	Y+18, r24	; 0x12
    2720:	9a 89       	ldd	r25, Y+18	; 0x12
    2722:	8d 89       	ldd	r24, Y+21	; 0x15
    2724:	98 17       	cp	r25, r24
    2726:	08 f4       	brcc	.+2      	; 0x272a <LCD_WriteStrSin+0x18c>
    2728:	4c cf       	rjmp	.-360    	; 0x25c2 <LCD_WriteStrSin+0x24>
			}
		}
		_delay_ms(500);

	}
}
    272a:	66 96       	adiw	r28, 0x16	; 22
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	de bf       	out	0x3e, r29	; 62
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	cd bf       	out	0x3d, r28	; 61
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	1f 91       	pop	r17
    273c:	0f 91       	pop	r16
    273e:	08 95       	ret

00002740 <LCD_WriteChar>:

void LCD_WriteChar(u8 LCD_Data)
{
    2740:	df 93       	push	r29
    2742:	cf 93       	push	r28
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    2748:	2f 97       	sbiw	r28, 0x0f	; 15
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	f8 94       	cli
    274e:	de bf       	out	0x3e, r29	; 62
    2750:	0f be       	out	0x3f, r0	; 63
    2752:	cd bf       	out	0x3d, r28	; 61
    2754:	8f 87       	std	Y+15, r24	; 0x0f
	//SET RS AND RESET RW
	DIO_SetPinValue(LCD_CONTROL_PORT,LCD_RS,HIGH);
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	62 e0       	ldi	r22, 0x02	; 2
    275a:	41 e0       	ldi	r20, 0x01	; 1
    275c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_PORT,LCD_RW,LOW);
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	61 e0       	ldi	r22, 0x01	; 1
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinValue>

	//SET PORT DATA COMMAND
	DIO_SetPortValue(LCD_DATA_PORT,LCD_Data);
    276a:	83 e0       	ldi	r24, 0x03	; 3
    276c:	6f 85       	ldd	r22, Y+15	; 0x0f
    276e:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_SetPortValue>

	//E1 FOR 1 MS
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_E,HIGH);
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	60 e0       	ldi	r22, 0x00	; 0
    2776:	41 e0       	ldi	r20, 0x01	; 1
    2778:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinValue>
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	a0 e8       	ldi	r26, 0x80	; 128
    2782:	bf e3       	ldi	r27, 0x3F	; 63
    2784:	8b 87       	std	Y+11, r24	; 0x0b
    2786:	9c 87       	std	Y+12, r25	; 0x0c
    2788:	ad 87       	std	Y+13, r26	; 0x0d
    278a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278c:	6b 85       	ldd	r22, Y+11	; 0x0b
    278e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2790:	8d 85       	ldd	r24, Y+13	; 0x0d
    2792:	9e 85       	ldd	r25, Y+14	; 0x0e
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	4a e7       	ldi	r20, 0x7A	; 122
    279a:	53 e4       	ldi	r21, 0x43	; 67
    279c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	8f 83       	std	Y+7, r24	; 0x07
    27a6:	98 87       	std	Y+8, r25	; 0x08
    27a8:	a9 87       	std	Y+9, r26	; 0x09
    27aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ac:	6f 81       	ldd	r22, Y+7	; 0x07
    27ae:	78 85       	ldd	r23, Y+8	; 0x08
    27b0:	89 85       	ldd	r24, Y+9	; 0x09
    27b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e8       	ldi	r20, 0x80	; 128
    27ba:	5f e3       	ldi	r21, 0x3F	; 63
    27bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c0:	88 23       	and	r24, r24
    27c2:	2c f4       	brge	.+10     	; 0x27ce <LCD_WriteChar+0x8e>
		__ticks = 1;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	9e 83       	std	Y+6, r25	; 0x06
    27ca:	8d 83       	std	Y+5, r24	; 0x05
    27cc:	3f c0       	rjmp	.+126    	; 0x284c <LCD_WriteChar+0x10c>
	else if (__tmp > 65535)
    27ce:	6f 81       	ldd	r22, Y+7	; 0x07
    27d0:	78 85       	ldd	r23, Y+8	; 0x08
    27d2:	89 85       	ldd	r24, Y+9	; 0x09
    27d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	3f ef       	ldi	r19, 0xFF	; 255
    27da:	4f e7       	ldi	r20, 0x7F	; 127
    27dc:	57 e4       	ldi	r21, 0x47	; 71
    27de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e2:	18 16       	cp	r1, r24
    27e4:	4c f5       	brge	.+82     	; 0x2838 <LCD_WriteChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e2       	ldi	r20, 0x20	; 32
    27f4:	51 e4       	ldi	r21, 0x41	; 65
    27f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	bc 01       	movw	r22, r24
    2800:	cd 01       	movw	r24, r26
    2802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	9e 83       	std	Y+6, r25	; 0x06
    280c:	8d 83       	std	Y+5, r24	; 0x05
    280e:	0f c0       	rjmp	.+30     	; 0x282e <LCD_WriteChar+0xee>
    2810:	89 e1       	ldi	r24, 0x19	; 25
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	9c 83       	std	Y+4, r25	; 0x04
    2816:	8b 83       	std	Y+3, r24	; 0x03
    2818:	8b 81       	ldd	r24, Y+3	; 0x03
    281a:	9c 81       	ldd	r25, Y+4	; 0x04
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <LCD_WriteChar+0xdc>
    2820:	9c 83       	std	Y+4, r25	; 0x04
    2822:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2824:	8d 81       	ldd	r24, Y+5	; 0x05
    2826:	9e 81       	ldd	r25, Y+6	; 0x06
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	9e 83       	std	Y+6, r25	; 0x06
    282c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282e:	8d 81       	ldd	r24, Y+5	; 0x05
    2830:	9e 81       	ldd	r25, Y+6	; 0x06
    2832:	00 97       	sbiw	r24, 0x00	; 0
    2834:	69 f7       	brne	.-38     	; 0x2810 <LCD_WriteChar+0xd0>
    2836:	14 c0       	rjmp	.+40     	; 0x2860 <LCD_WriteChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2838:	6f 81       	ldd	r22, Y+7	; 0x07
    283a:	78 85       	ldd	r23, Y+8	; 0x08
    283c:	89 85       	ldd	r24, Y+9	; 0x09
    283e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	9e 83       	std	Y+6, r25	; 0x06
    284a:	8d 83       	std	Y+5, r24	; 0x05
    284c:	8d 81       	ldd	r24, Y+5	; 0x05
    284e:	9e 81       	ldd	r25, Y+6	; 0x06
    2850:	9a 83       	std	Y+2, r25	; 0x02
    2852:	89 83       	std	Y+1, r24	; 0x01
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	9a 81       	ldd	r25, Y+2	; 0x02
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	f1 f7       	brne	.-4      	; 0x2858 <LCD_WriteChar+0x118>
    285c:	9a 83       	std	Y+2, r25	; 0x02
    285e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	//RESET E1
	DIO_SetPinValue(LCD_CONTROL_PORT, LCD_E,LOW);
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	60 e0       	ldi	r22, 0x00	; 0
    2864:	40 e0       	ldi	r20, 0x00	; 0
    2866:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinValue>

}
    286a:	2f 96       	adiw	r28, 0x0f	; 15
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <Slave_calc>:
u8 buff_rec[][10];
u8 buff_rec2[][10];
u8 x1 [8][10];
u8 x2 [16][10];
int r[8];
void Slave_calc(u8 m1[][10] , u8 m2 [][10]){
    287c:	0f 93       	push	r16
    287e:	1f 93       	push	r17
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	2c 97       	sbiw	r28, 0x0c	; 12
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61
    2894:	9a 87       	std	Y+10, r25	; 0x0a
    2896:	89 87       	std	Y+9, r24	; 0x09
    2898:	7c 87       	std	Y+12, r23	; 0x0c
    289a:	6b 87       	std	Y+11, r22	; 0x0b

	for ( u16 i = 0 ; i < 2 ; i++ ){
    289c:	18 86       	std	Y+8, r1	; 0x08
    289e:	1f 82       	std	Y+7, r1	; 0x07
    28a0:	7b c0       	rjmp	.+246    	; 0x2998 <Slave_calc+0x11c>
		for ( u16 j = 0 ; j < 4 ; j++){
    28a2:	1e 82       	std	Y+6, r1	; 0x06
    28a4:	1d 82       	std	Y+5, r1	; 0x05
    28a6:	6d c0       	rjmp	.+218    	; 0x2982 <Slave_calc+0x106>
			int sum = 0;
    28a8:	1c 82       	std	Y+4, r1	; 0x04
    28aa:	1b 82       	std	Y+3, r1	; 0x03
			for( u16 k = 0; k < 4 ; k++){
    28ac:	1a 82       	std	Y+2, r1	; 0x02
    28ae:	19 82       	std	Y+1, r1	; 0x01
    28b0:	49 c0       	rjmp	.+146    	; 0x2944 <Slave_calc+0xc8>
				sum += atoi(m1[ k + i * 4 ] ) * atoi(m2[ j + k * 4 ] );
    28b2:	49 85       	ldd	r20, Y+9	; 0x09
    28b4:	5a 85       	ldd	r21, Y+10	; 0x0a
    28b6:	8f 81       	ldd	r24, Y+7	; 0x07
    28b8:	98 85       	ldd	r25, Y+8	; 0x08
    28ba:	9c 01       	movw	r18, r24
    28bc:	22 0f       	add	r18, r18
    28be:	33 1f       	adc	r19, r19
    28c0:	22 0f       	add	r18, r18
    28c2:	33 1f       	adc	r19, r19
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	9a 81       	ldd	r25, Y+2	; 0x02
    28c8:	82 0f       	add	r24, r18
    28ca:	93 1f       	adc	r25, r19
    28cc:	9c 01       	movw	r18, r24
    28ce:	22 0f       	add	r18, r18
    28d0:	33 1f       	adc	r19, r19
    28d2:	c9 01       	movw	r24, r18
    28d4:	88 0f       	add	r24, r24
    28d6:	99 1f       	adc	r25, r25
    28d8:	88 0f       	add	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	82 0f       	add	r24, r18
    28de:	93 1f       	adc	r25, r19
    28e0:	84 0f       	add	r24, r20
    28e2:	95 1f       	adc	r25, r21
    28e4:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <atoi>
    28e8:	8c 01       	movw	r16, r24
    28ea:	4b 85       	ldd	r20, Y+11	; 0x0b
    28ec:	5c 85       	ldd	r21, Y+12	; 0x0c
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	9a 81       	ldd	r25, Y+2	; 0x02
    28f2:	9c 01       	movw	r18, r24
    28f4:	22 0f       	add	r18, r18
    28f6:	33 1f       	adc	r19, r19
    28f8:	22 0f       	add	r18, r18
    28fa:	33 1f       	adc	r19, r19
    28fc:	8d 81       	ldd	r24, Y+5	; 0x05
    28fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2900:	82 0f       	add	r24, r18
    2902:	93 1f       	adc	r25, r19
    2904:	9c 01       	movw	r18, r24
    2906:	22 0f       	add	r18, r18
    2908:	33 1f       	adc	r19, r19
    290a:	c9 01       	movw	r24, r18
    290c:	88 0f       	add	r24, r24
    290e:	99 1f       	adc	r25, r25
    2910:	88 0f       	add	r24, r24
    2912:	99 1f       	adc	r25, r25
    2914:	82 0f       	add	r24, r18
    2916:	93 1f       	adc	r25, r19
    2918:	84 0f       	add	r24, r20
    291a:	95 1f       	adc	r25, r21
    291c:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <atoi>
    2920:	08 9f       	mul	r16, r24
    2922:	90 01       	movw	r18, r0
    2924:	09 9f       	mul	r16, r25
    2926:	30 0d       	add	r19, r0
    2928:	18 9f       	mul	r17, r24
    292a:	30 0d       	add	r19, r0
    292c:	11 24       	eor	r1, r1
    292e:	8b 81       	ldd	r24, Y+3	; 0x03
    2930:	9c 81       	ldd	r25, Y+4	; 0x04
    2932:	82 0f       	add	r24, r18
    2934:	93 1f       	adc	r25, r19
    2936:	9c 83       	std	Y+4, r25	; 0x04
    2938:	8b 83       	std	Y+3, r24	; 0x03
void Slave_calc(u8 m1[][10] , u8 m2 [][10]){

	for ( u16 i = 0 ; i < 2 ; i++ ){
		for ( u16 j = 0 ; j < 4 ; j++){
			int sum = 0;
			for( u16 k = 0; k < 4 ; k++){
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	9a 81       	ldd	r25, Y+2	; 0x02
    293e:	01 96       	adiw	r24, 0x01	; 1
    2940:	9a 83       	std	Y+2, r25	; 0x02
    2942:	89 83       	std	Y+1, r24	; 0x01
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	9a 81       	ldd	r25, Y+2	; 0x02
    2948:	84 30       	cpi	r24, 0x04	; 4
    294a:	91 05       	cpc	r25, r1
    294c:	08 f4       	brcc	.+2      	; 0x2950 <Slave_calc+0xd4>
    294e:	b1 cf       	rjmp	.-158    	; 0x28b2 <Slave_calc+0x36>
				sum += atoi(m1[ k + i * 4 ] ) * atoi(m2[ j + k * 4 ] );
			}
			r[ j +i * 4] = sum;
    2950:	8f 81       	ldd	r24, Y+7	; 0x07
    2952:	98 85       	ldd	r25, Y+8	; 0x08
    2954:	9c 01       	movw	r18, r24
    2956:	22 0f       	add	r18, r18
    2958:	33 1f       	adc	r19, r19
    295a:	22 0f       	add	r18, r18
    295c:	33 1f       	adc	r19, r19
    295e:	8d 81       	ldd	r24, Y+5	; 0x05
    2960:	9e 81       	ldd	r25, Y+6	; 0x06
    2962:	82 0f       	add	r24, r18
    2964:	93 1f       	adc	r25, r19
    2966:	88 0f       	add	r24, r24
    2968:	99 1f       	adc	r25, r25
    296a:	fc 01       	movw	r30, r24
    296c:	ea 5e       	subi	r30, 0xEA	; 234
    296e:	fe 4f       	sbci	r31, 0xFE	; 254
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	9c 81       	ldd	r25, Y+4	; 0x04
    2974:	91 83       	std	Z+1, r25	; 0x01
    2976:	80 83       	st	Z, r24
u8 x2 [16][10];
int r[8];
void Slave_calc(u8 m1[][10] , u8 m2 [][10]){

	for ( u16 i = 0 ; i < 2 ; i++ ){
		for ( u16 j = 0 ; j < 4 ; j++){
    2978:	8d 81       	ldd	r24, Y+5	; 0x05
    297a:	9e 81       	ldd	r25, Y+6	; 0x06
    297c:	01 96       	adiw	r24, 0x01	; 1
    297e:	9e 83       	std	Y+6, r25	; 0x06
    2980:	8d 83       	std	Y+5, r24	; 0x05
    2982:	8d 81       	ldd	r24, Y+5	; 0x05
    2984:	9e 81       	ldd	r25, Y+6	; 0x06
    2986:	84 30       	cpi	r24, 0x04	; 4
    2988:	91 05       	cpc	r25, r1
    298a:	08 f4       	brcc	.+2      	; 0x298e <Slave_calc+0x112>
    298c:	8d cf       	rjmp	.-230    	; 0x28a8 <Slave_calc+0x2c>
u8 x1 [8][10];
u8 x2 [16][10];
int r[8];
void Slave_calc(u8 m1[][10] , u8 m2 [][10]){

	for ( u16 i = 0 ; i < 2 ; i++ ){
    298e:	8f 81       	ldd	r24, Y+7	; 0x07
    2990:	98 85       	ldd	r25, Y+8	; 0x08
    2992:	01 96       	adiw	r24, 0x01	; 1
    2994:	98 87       	std	Y+8, r25	; 0x08
    2996:	8f 83       	std	Y+7, r24	; 0x07
    2998:	8f 81       	ldd	r24, Y+7	; 0x07
    299a:	98 85       	ldd	r25, Y+8	; 0x08
    299c:	82 30       	cpi	r24, 0x02	; 2
    299e:	91 05       	cpc	r25, r1
    29a0:	08 f4       	brcc	.+2      	; 0x29a4 <Slave_calc+0x128>
    29a2:	7f cf       	rjmp	.-258    	; 0x28a2 <Slave_calc+0x26>
			}
			r[ j +i * 4] = sum;
		}
	}

}
    29a4:	2c 96       	adiw	r28, 0x0c	; 12
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	cd bf       	out	0x3d, r28	; 61
    29b0:	cf 91       	pop	r28
    29b2:	df 91       	pop	r29
    29b4:	1f 91       	pop	r17
    29b6:	0f 91       	pop	r16
    29b8:	08 95       	ret

000029ba <main>:
void main()
{
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	c3 57       	subi	r28, 0x73	; 115
    29c4:	d0 40       	sbci	r29, 0x00	; 0
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();
    29d0:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <LCD_Init>
	I2C_Handle handle;
	handle.address = 0x02;
    29d4:	82 e0       	ldi	r24, 0x02	; 2
    29d6:	8a a3       	std	Y+34, r24	; 0x22
	handle.clock = I2C_CLOCK_200KHZ;
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	8b a3       	std	Y+35, r24	; 0x23
	for( u16 i = 0;i <16 ; i++){
    29dc:	18 8e       	std	Y+24, r1	; 0x18
    29de:	1f 8a       	std	Y+23, r1	; 0x17
    29e0:	38 c0       	rjmp	.+112    	; 0x2a52 <main+0x98>
	handle.receiveBuff = buff_rec[i];
    29e2:	46 e7       	ldi	r20, 0x76	; 118
    29e4:	51 e0       	ldi	r21, 0x01	; 1
    29e6:	8f 89       	ldd	r24, Y+23	; 0x17
    29e8:	98 8d       	ldd	r25, Y+24	; 0x18
    29ea:	9c 01       	movw	r18, r24
    29ec:	22 0f       	add	r18, r18
    29ee:	33 1f       	adc	r19, r19
    29f0:	c9 01       	movw	r24, r18
    29f2:	88 0f       	add	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	82 0f       	add	r24, r18
    29fc:	93 1f       	adc	r25, r19
    29fe:	84 0f       	add	r24, r20
    2a00:	95 1f       	adc	r25, r21
    2a02:	9e 8f       	std	Y+30, r25	; 0x1e
    2a04:	8d 8f       	std	Y+29, r24	; 0x1d
	handle.receiveBuffLen = 10;
    2a06:	8a e0       	ldi	r24, 0x0A	; 10
    2a08:	8f 8f       	std	Y+31, r24	; 0x1f
	handle.mode = I2C_SLAVE_RECEIVE_MODE;
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	89 a3       	std	Y+33, r24	; 0x21
	I2C_Init(&handle);
    2a0e:	ce 01       	movw	r24, r28
    2a10:	49 96       	adiw	r24, 0x19	; 25
    2a12:	0e 94 0d 0a 	call	0x141a	; 0x141a <I2C_Init>
	I2C_Slave_Read(&handle);
    2a16:	ce 01       	movw	r24, r28
    2a18:	49 96       	adiw	r24, 0x19	; 25
    2a1a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <I2C_Slave_Read>
	strcpy(x2[i],handle.receiveBuff);
    2a1e:	46 e7       	ldi	r20, 0x76	; 118
    2a20:	50 e0       	ldi	r21, 0x00	; 0
    2a22:	8f 89       	ldd	r24, Y+23	; 0x17
    2a24:	98 8d       	ldd	r25, Y+24	; 0x18
    2a26:	9c 01       	movw	r18, r24
    2a28:	22 0f       	add	r18, r18
    2a2a:	33 1f       	adc	r19, r19
    2a2c:	c9 01       	movw	r24, r18
    2a2e:	88 0f       	add	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	88 0f       	add	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	82 0f       	add	r24, r18
    2a38:	93 1f       	adc	r25, r19
    2a3a:	84 0f       	add	r24, r20
    2a3c:	95 1f       	adc	r25, r21
    2a3e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2a40:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2a42:	b9 01       	movw	r22, r18
    2a44:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <strcpy>
{
	LCD_Init();
	I2C_Handle handle;
	handle.address = 0x02;
	handle.clock = I2C_CLOCK_200KHZ;
	for( u16 i = 0;i <16 ; i++){
    2a48:	8f 89       	ldd	r24, Y+23	; 0x17
    2a4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a4c:	01 96       	adiw	r24, 0x01	; 1
    2a4e:	98 8f       	std	Y+24, r25	; 0x18
    2a50:	8f 8b       	std	Y+23, r24	; 0x17
    2a52:	8f 89       	ldd	r24, Y+23	; 0x17
    2a54:	98 8d       	ldd	r25, Y+24	; 0x18
    2a56:	80 31       	cpi	r24, 0x10	; 16
    2a58:	91 05       	cpc	r25, r1
    2a5a:	18 f2       	brcs	.-122    	; 0x29e2 <main+0x28>
//	LCD_WriteStr(handle.receiveBuff);
//	if(i == 11){
//		LCD_SetCursor(0,1);
//	}
	}
	for( u16 i = 0;i <8 ; i++){
    2a5c:	1e 8a       	std	Y+22, r1	; 0x16
    2a5e:	1d 8a       	std	Y+21, r1	; 0x15
    2a60:	38 c0       	rjmp	.+112    	; 0x2ad2 <main+0x118>
		handle.receiveBuff = buff_rec2[i];
    2a62:	40 e8       	ldi	r20, 0x80	; 128
    2a64:	51 e0       	ldi	r21, 0x01	; 1
    2a66:	8d 89       	ldd	r24, Y+21	; 0x15
    2a68:	9e 89       	ldd	r25, Y+22	; 0x16
    2a6a:	9c 01       	movw	r18, r24
    2a6c:	22 0f       	add	r18, r18
    2a6e:	33 1f       	adc	r19, r19
    2a70:	c9 01       	movw	r24, r18
    2a72:	88 0f       	add	r24, r24
    2a74:	99 1f       	adc	r25, r25
    2a76:	88 0f       	add	r24, r24
    2a78:	99 1f       	adc	r25, r25
    2a7a:	82 0f       	add	r24, r18
    2a7c:	93 1f       	adc	r25, r19
    2a7e:	84 0f       	add	r24, r20
    2a80:	95 1f       	adc	r25, r21
    2a82:	9e 8f       	std	Y+30, r25	; 0x1e
    2a84:	8d 8f       	std	Y+29, r24	; 0x1d
		handle.receiveBuffLen = 10;
    2a86:	8a e0       	ldi	r24, 0x0A	; 10
    2a88:	8f 8f       	std	Y+31, r24	; 0x1f
		handle.mode = I2C_SLAVE_RECEIVE_MODE;
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	89 a3       	std	Y+33, r24	; 0x21
		I2C_Init(&handle);
    2a8e:	ce 01       	movw	r24, r28
    2a90:	49 96       	adiw	r24, 0x19	; 25
    2a92:	0e 94 0d 0a 	call	0x141a	; 0x141a <I2C_Init>
		I2C_Slave_Read(&handle);
    2a96:	ce 01       	movw	r24, r28
    2a98:	49 96       	adiw	r24, 0x19	; 25
    2a9a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <I2C_Slave_Read>
		strcpy(x1[i],handle.receiveBuff);
    2a9e:	46 e2       	ldi	r20, 0x26	; 38
    2aa0:	51 e0       	ldi	r21, 0x01	; 1
    2aa2:	8d 89       	ldd	r24, Y+21	; 0x15
    2aa4:	9e 89       	ldd	r25, Y+22	; 0x16
    2aa6:	9c 01       	movw	r18, r24
    2aa8:	22 0f       	add	r18, r18
    2aaa:	33 1f       	adc	r19, r19
    2aac:	c9 01       	movw	r24, r18
    2aae:	88 0f       	add	r24, r24
    2ab0:	99 1f       	adc	r25, r25
    2ab2:	88 0f       	add	r24, r24
    2ab4:	99 1f       	adc	r25, r25
    2ab6:	82 0f       	add	r24, r18
    2ab8:	93 1f       	adc	r25, r19
    2aba:	84 0f       	add	r24, r20
    2abc:	95 1f       	adc	r25, r21
    2abe:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2ac0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2ac2:	b9 01       	movw	r22, r18
    2ac4:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <strcpy>
//	LCD_WriteStr(handle.receiveBuff);
//	if(i == 11){
//		LCD_SetCursor(0,1);
//	}
	}
	for( u16 i = 0;i <8 ; i++){
    2ac8:	8d 89       	ldd	r24, Y+21	; 0x15
    2aca:	9e 89       	ldd	r25, Y+22	; 0x16
    2acc:	01 96       	adiw	r24, 0x01	; 1
    2ace:	9e 8b       	std	Y+22, r25	; 0x16
    2ad0:	8d 8b       	std	Y+21, r24	; 0x15
    2ad2:	8d 89       	ldd	r24, Y+21	; 0x15
    2ad4:	9e 89       	ldd	r25, Y+22	; 0x16
    2ad6:	88 30       	cpi	r24, 0x08	; 8
    2ad8:	91 05       	cpc	r25, r1
    2ada:	18 f2       	brcs	.-122    	; 0x2a62 <main+0xa8>
		I2C_Slave_Read(&handle);
		strcpy(x1[i],handle.receiveBuff);
//		LCD_WriteStr(x1);
//		LCD_WriteStr(",");
		}
	Slave_calc(x1,x2);
    2adc:	86 e2       	ldi	r24, 0x26	; 38
    2ade:	91 e0       	ldi	r25, 0x01	; 1
    2ae0:	26 e7       	ldi	r18, 0x76	; 118
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	b9 01       	movw	r22, r18
    2ae6:	0e 94 3e 14 	call	0x287c	; 0x287c <Slave_calc>
	u8 temp[8][10]={"1","2","3","4","5","6","7","8"};
    2aea:	80 e5       	ldi	r24, 0x50	; 80
    2aec:	fe 01       	movw	r30, r28
    2aee:	b4 96       	adiw	r30, 0x24	; 36
    2af0:	df 01       	movw	r26, r30
    2af2:	98 2f       	mov	r25, r24
    2af4:	1d 92       	st	X+, r1
    2af6:	9a 95       	dec	r25
    2af8:	e9 f7       	brne	.-6      	; 0x2af4 <main+0x13a>
    2afa:	81 e3       	ldi	r24, 0x31	; 49
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	a0 e0       	ldi	r26, 0x00	; 0
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	8c a3       	std	Y+36, r24	; 0x24
    2b04:	9d a3       	std	Y+37, r25	; 0x25
    2b06:	ae a3       	std	Y+38, r26	; 0x26
    2b08:	bf a3       	std	Y+39, r27	; 0x27
    2b0a:	86 e0       	ldi	r24, 0x06	; 6
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	b8 96       	adiw	r30, 0x28	; 40
    2b10:	df 01       	movw	r26, r30
    2b12:	98 2f       	mov	r25, r24
    2b14:	1d 92       	st	X+, r1
    2b16:	9a 95       	dec	r25
    2b18:	e9 f7       	brne	.-6      	; 0x2b14 <main+0x15a>
    2b1a:	82 e3       	ldi	r24, 0x32	; 50
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	a0 e0       	ldi	r26, 0x00	; 0
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	8e a7       	std	Y+46, r24	; 0x2e
    2b24:	9f a7       	std	Y+47, r25	; 0x2f
    2b26:	a8 ab       	std	Y+48, r26	; 0x30
    2b28:	b9 ab       	std	Y+49, r27	; 0x31
    2b2a:	86 e0       	ldi	r24, 0x06	; 6
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	f2 96       	adiw	r30, 0x32	; 50
    2b30:	df 01       	movw	r26, r30
    2b32:	98 2f       	mov	r25, r24
    2b34:	1d 92       	st	X+, r1
    2b36:	9a 95       	dec	r25
    2b38:	e9 f7       	brne	.-6      	; 0x2b34 <main+0x17a>
    2b3a:	83 e3       	ldi	r24, 0x33	; 51
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	a0 e0       	ldi	r26, 0x00	; 0
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	88 af       	std	Y+56, r24	; 0x38
    2b44:	99 af       	std	Y+57, r25	; 0x39
    2b46:	aa af       	std	Y+58, r26	; 0x3a
    2b48:	bb af       	std	Y+59, r27	; 0x3b
    2b4a:	86 e0       	ldi	r24, 0x06	; 6
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	fc 96       	adiw	r30, 0x3c	; 60
    2b50:	df 01       	movw	r26, r30
    2b52:	98 2f       	mov	r25, r24
    2b54:	1d 92       	st	X+, r1
    2b56:	9a 95       	dec	r25
    2b58:	e9 f7       	brne	.-6      	; 0x2b54 <main+0x19a>
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	ee 5b       	subi	r30, 0xBE	; 190
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	84 e3       	ldi	r24, 0x34	; 52
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	a0 e0       	ldi	r26, 0x00	; 0
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	80 83       	st	Z, r24
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	a2 83       	std	Z+2, r26	; 0x02
    2b6e:	b3 83       	std	Z+3, r27	; 0x03
    2b70:	86 e0       	ldi	r24, 0x06	; 6
    2b72:	34 96       	adiw	r30, 0x04	; 4
    2b74:	df 01       	movw	r26, r30
    2b76:	98 2f       	mov	r25, r24
    2b78:	1d 92       	st	X+, r1
    2b7a:	9a 95       	dec	r25
    2b7c:	e9 f7       	brne	.-6      	; 0x2b78 <main+0x1be>
    2b7e:	fe 01       	movw	r30, r28
    2b80:	e4 5b       	subi	r30, 0xB4	; 180
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	85 e3       	ldi	r24, 0x35	; 53
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	a0 e0       	ldi	r26, 0x00	; 0
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	80 83       	st	Z, r24
    2b8e:	91 83       	std	Z+1, r25	; 0x01
    2b90:	a2 83       	std	Z+2, r26	; 0x02
    2b92:	b3 83       	std	Z+3, r27	; 0x03
    2b94:	86 e0       	ldi	r24, 0x06	; 6
    2b96:	34 96       	adiw	r30, 0x04	; 4
    2b98:	df 01       	movw	r26, r30
    2b9a:	98 2f       	mov	r25, r24
    2b9c:	1d 92       	st	X+, r1
    2b9e:	9a 95       	dec	r25
    2ba0:	e9 f7       	brne	.-6      	; 0x2b9c <main+0x1e2>
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	ea 5a       	subi	r30, 0xAA	; 170
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	86 e3       	ldi	r24, 0x36	; 54
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	a0 e0       	ldi	r26, 0x00	; 0
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	80 83       	st	Z, r24
    2bb2:	91 83       	std	Z+1, r25	; 0x01
    2bb4:	a2 83       	std	Z+2, r26	; 0x02
    2bb6:	b3 83       	std	Z+3, r27	; 0x03
    2bb8:	86 e0       	ldi	r24, 0x06	; 6
    2bba:	34 96       	adiw	r30, 0x04	; 4
    2bbc:	df 01       	movw	r26, r30
    2bbe:	98 2f       	mov	r25, r24
    2bc0:	1d 92       	st	X+, r1
    2bc2:	9a 95       	dec	r25
    2bc4:	e9 f7       	brne	.-6      	; 0x2bc0 <main+0x206>
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	e0 5a       	subi	r30, 0xA0	; 160
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	87 e3       	ldi	r24, 0x37	; 55
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	a0 e0       	ldi	r26, 0x00	; 0
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	80 83       	st	Z, r24
    2bd6:	91 83       	std	Z+1, r25	; 0x01
    2bd8:	a2 83       	std	Z+2, r26	; 0x02
    2bda:	b3 83       	std	Z+3, r27	; 0x03
    2bdc:	86 e0       	ldi	r24, 0x06	; 6
    2bde:	34 96       	adiw	r30, 0x04	; 4
    2be0:	df 01       	movw	r26, r30
    2be2:	98 2f       	mov	r25, r24
    2be4:	1d 92       	st	X+, r1
    2be6:	9a 95       	dec	r25
    2be8:	e9 f7       	brne	.-6      	; 0x2be4 <main+0x22a>
    2bea:	fe 01       	movw	r30, r28
    2bec:	e6 59       	subi	r30, 0x96	; 150
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	88 e3       	ldi	r24, 0x38	; 56
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	a0 e0       	ldi	r26, 0x00	; 0
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	80 83       	st	Z, r24
    2bfa:	91 83       	std	Z+1, r25	; 0x01
    2bfc:	a2 83       	std	Z+2, r26	; 0x02
    2bfe:	b3 83       	std	Z+3, r27	; 0x03
    2c00:	86 e0       	ldi	r24, 0x06	; 6
    2c02:	34 96       	adiw	r30, 0x04	; 4
    2c04:	df 01       	movw	r26, r30
    2c06:	98 2f       	mov	r25, r24
    2c08:	1d 92       	st	X+, r1
    2c0a:	9a 95       	dec	r25
    2c0c:	e9 f7       	brne	.-6      	; 0x2c08 <main+0x24e>
	for(u16 i = 0;i<8;i++){
    2c0e:	1c 8a       	std	Y+20, r1	; 0x14
    2c10:	1b 8a       	std	Y+19, r1	; 0x13
    2c12:	37 c0       	rjmp	.+110    	; 0x2c82 <main+0x2c8>
		sprintf(temp[i], "%d", r[i]);
    2c14:	ae 01       	movw	r20, r28
    2c16:	4c 5d       	subi	r20, 0xDC	; 220
    2c18:	5f 4f       	sbci	r21, 0xFF	; 255
    2c1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c1e:	9c 01       	movw	r18, r24
    2c20:	22 0f       	add	r18, r18
    2c22:	33 1f       	adc	r19, r19
    2c24:	c9 01       	movw	r24, r18
    2c26:	88 0f       	add	r24, r24
    2c28:	99 1f       	adc	r25, r25
    2c2a:	88 0f       	add	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	82 0f       	add	r24, r18
    2c30:	93 1f       	adc	r25, r19
    2c32:	48 0f       	add	r20, r24
    2c34:	59 1f       	adc	r21, r25
    2c36:	8b 89       	ldd	r24, Y+19	; 0x13
    2c38:	9c 89       	ldd	r25, Y+20	; 0x14
    2c3a:	88 0f       	add	r24, r24
    2c3c:	99 1f       	adc	r25, r25
    2c3e:	fc 01       	movw	r30, r24
    2c40:	ea 5e       	subi	r30, 0xEA	; 234
    2c42:	fe 4f       	sbci	r31, 0xFE	; 254
    2c44:	20 81       	ld	r18, Z
    2c46:	31 81       	ldd	r19, Z+1	; 0x01
    2c48:	00 d0       	rcall	.+0      	; 0x2c4a <main+0x290>
    2c4a:	00 d0       	rcall	.+0      	; 0x2c4c <main+0x292>
    2c4c:	00 d0       	rcall	.+0      	; 0x2c4e <main+0x294>
    2c4e:	ed b7       	in	r30, 0x3d	; 61
    2c50:	fe b7       	in	r31, 0x3e	; 62
    2c52:	31 96       	adiw	r30, 0x01	; 1
    2c54:	51 83       	std	Z+1, r21	; 0x01
    2c56:	40 83       	st	Z, r20
    2c58:	80 e6       	ldi	r24, 0x60	; 96
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	93 83       	std	Z+3, r25	; 0x03
    2c5e:	82 83       	std	Z+2, r24	; 0x02
    2c60:	35 83       	std	Z+5, r19	; 0x05
    2c62:	24 83       	std	Z+4, r18	; 0x04
    2c64:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <sprintf>
    2c68:	ad b7       	in	r26, 0x3d	; 61
    2c6a:	be b7       	in	r27, 0x3e	; 62
    2c6c:	16 96       	adiw	r26, 0x06	; 6
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	be bf       	out	0x3e, r27	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	ad bf       	out	0x3d, r26	; 61
//		LCD_WriteStr(x1);
//		LCD_WriteStr(",");
		}
	Slave_calc(x1,x2);
	u8 temp[8][10]={"1","2","3","4","5","6","7","8"};
	for(u16 i = 0;i<8;i++){
    2c78:	8b 89       	ldd	r24, Y+19	; 0x13
    2c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c7c:	01 96       	adiw	r24, 0x01	; 1
    2c7e:	9c 8b       	std	Y+20, r25	; 0x14
    2c80:	8b 8b       	std	Y+19, r24	; 0x13
    2c82:	8b 89       	ldd	r24, Y+19	; 0x13
    2c84:	9c 89       	ldd	r25, Y+20	; 0x14
    2c86:	88 30       	cpi	r24, 0x08	; 8
    2c88:	91 05       	cpc	r25, r1
    2c8a:	20 f2       	brcs	.-120    	; 0x2c14 <main+0x25a>
		sprintf(temp[i], "%d", r[i]);

	}
	for (int i=0;i<8;i++){
    2c8c:	1a 8a       	std	Y+18, r1	; 0x12
    2c8e:	19 8a       	std	Y+17, r1	; 0x11
    2c90:	25 c0       	rjmp	.+74     	; 0x2cdc <main+0x322>
				LCD_WriteStr(temp[i]);
    2c92:	ae 01       	movw	r20, r28
    2c94:	4c 5d       	subi	r20, 0xDC	; 220
    2c96:	5f 4f       	sbci	r21, 0xFF	; 255
    2c98:	89 89       	ldd	r24, Y+17	; 0x11
    2c9a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c9c:	9c 01       	movw	r18, r24
    2c9e:	22 0f       	add	r18, r18
    2ca0:	33 1f       	adc	r19, r19
    2ca2:	c9 01       	movw	r24, r18
    2ca4:	88 0f       	add	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	82 0f       	add	r24, r18
    2cae:	93 1f       	adc	r25, r19
    2cb0:	84 0f       	add	r24, r20
    2cb2:	95 1f       	adc	r25, r21
    2cb4:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_WriteStr>
				LCD_WriteStr(",");
    2cb8:	83 e6       	ldi	r24, 0x63	; 99
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_WriteStr>
//		LCD_WriteNum(r[i],0);
//			LCD_WriteChar(',');
				if(i == 3){
    2cc0:	89 89       	ldd	r24, Y+17	; 0x11
    2cc2:	9a 89       	ldd	r25, Y+18	; 0x12
    2cc4:	83 30       	cpi	r24, 0x03	; 3
    2cc6:	91 05       	cpc	r25, r1
    2cc8:	21 f4       	brne	.+8      	; 0x2cd2 <main+0x318>
					LCD_SetCursor(0,1);
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	61 e0       	ldi	r22, 0x01	; 1
    2cce:	0e 94 aa 12 	call	0x2554	; 0x2554 <LCD_SetCursor>
	u8 temp[8][10]={"1","2","3","4","5","6","7","8"};
	for(u16 i = 0;i<8;i++){
		sprintf(temp[i], "%d", r[i]);

	}
	for (int i=0;i<8;i++){
    2cd2:	89 89       	ldd	r24, Y+17	; 0x11
    2cd4:	9a 89       	ldd	r25, Y+18	; 0x12
    2cd6:	01 96       	adiw	r24, 0x01	; 1
    2cd8:	9a 8b       	std	Y+18, r25	; 0x12
    2cda:	89 8b       	std	Y+17, r24	; 0x11
    2cdc:	89 89       	ldd	r24, Y+17	; 0x11
    2cde:	9a 89       	ldd	r25, Y+18	; 0x12
    2ce0:	88 30       	cpi	r24, 0x08	; 8
    2ce2:	91 05       	cpc	r25, r1
    2ce4:	b4 f2       	brlt	.-84     	; 0x2c92 <main+0x2d8>
				}
	}



	for (u16 i =0; i <8;i++){
    2ce6:	18 8a       	std	Y+16, r1	; 0x10
    2ce8:	1f 86       	std	Y+15, r1	; 0x0f
    2cea:	99 c0       	rjmp	.+306    	; 0x2e1e <main+0x464>
		handle.sendBuff = temp[i];
    2cec:	ae 01       	movw	r20, r28
    2cee:	4c 5d       	subi	r20, 0xDC	; 220
    2cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    2cf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf4:	98 89       	ldd	r25, Y+16	; 0x10
    2cf6:	9c 01       	movw	r18, r24
    2cf8:	22 0f       	add	r18, r18
    2cfa:	33 1f       	adc	r19, r19
    2cfc:	c9 01       	movw	r24, r18
    2cfe:	88 0f       	add	r24, r24
    2d00:	99 1f       	adc	r25, r25
    2d02:	88 0f       	add	r24, r24
    2d04:	99 1f       	adc	r25, r25
    2d06:	82 0f       	add	r24, r18
    2d08:	93 1f       	adc	r25, r19
    2d0a:	84 0f       	add	r24, r20
    2d0c:	95 1f       	adc	r25, r21
    2d0e:	9a 8f       	std	Y+26, r25	; 0x1a
    2d10:	89 8f       	std	Y+25, r24	; 0x19
		handle.sendBuffLen = 20;
    2d12:	84 e1       	ldi	r24, 0x14	; 20
    2d14:	8b 8f       	std	Y+27, r24	; 0x1b
		I2C_Init(&handle);
    2d16:	ce 01       	movw	r24, r28
    2d18:	49 96       	adiw	r24, 0x19	; 25
    2d1a:	0e 94 0d 0a 	call	0x141a	; 0x141a <I2C_Init>
		I2C_Start(0x06);
    2d1e:	86 e0       	ldi	r24, 0x06	; 6
    2d20:	0e 94 3f 0a 	call	0x147e	; 0x147e <I2C_Start>
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	a0 e2       	ldi	r26, 0x20	; 32
    2d2a:	b1 e4       	ldi	r27, 0x41	; 65
    2d2c:	8b 87       	std	Y+11, r24	; 0x0b
    2d2e:	9c 87       	std	Y+12, r25	; 0x0c
    2d30:	ad 87       	std	Y+13, r26	; 0x0d
    2d32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	4a ef       	ldi	r20, 0xFA	; 250
    2d42:	54 e4       	ldi	r21, 0x44	; 68
    2d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	8f 83       	std	Y+7, r24	; 0x07
    2d4e:	98 87       	std	Y+8, r25	; 0x08
    2d50:	a9 87       	std	Y+9, r26	; 0x09
    2d52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d54:	6f 81       	ldd	r22, Y+7	; 0x07
    2d56:	78 85       	ldd	r23, Y+8	; 0x08
    2d58:	89 85       	ldd	r24, Y+9	; 0x09
    2d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e8       	ldi	r20, 0x80	; 128
    2d62:	5f e3       	ldi	r21, 0x3F	; 63
    2d64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d68:	88 23       	and	r24, r24
    2d6a:	2c f4       	brge	.+10     	; 0x2d76 <main+0x3bc>
		__ticks = 1;
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	9e 83       	std	Y+6, r25	; 0x06
    2d72:	8d 83       	std	Y+5, r24	; 0x05
    2d74:	3f c0       	rjmp	.+126    	; 0x2df4 <main+0x43a>
	else if (__tmp > 65535)
    2d76:	6f 81       	ldd	r22, Y+7	; 0x07
    2d78:	78 85       	ldd	r23, Y+8	; 0x08
    2d7a:	89 85       	ldd	r24, Y+9	; 0x09
    2d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	3f ef       	ldi	r19, 0xFF	; 255
    2d82:	4f e7       	ldi	r20, 0x7F	; 127
    2d84:	57 e4       	ldi	r21, 0x47	; 71
    2d86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d8a:	18 16       	cp	r1, r24
    2d8c:	4c f5       	brge	.+82     	; 0x2de0 <main+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	40 e2       	ldi	r20, 0x20	; 32
    2d9c:	51 e4       	ldi	r21, 0x41	; 65
    2d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	bc 01       	movw	r22, r24
    2da8:	cd 01       	movw	r24, r26
    2daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	9e 83       	std	Y+6, r25	; 0x06
    2db4:	8d 83       	std	Y+5, r24	; 0x05
    2db6:	0f c0       	rjmp	.+30     	; 0x2dd6 <main+0x41c>
    2db8:	88 ec       	ldi	r24, 0xC8	; 200
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	9c 83       	std	Y+4, r25	; 0x04
    2dbe:	8b 83       	std	Y+3, r24	; 0x03
    2dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc4:	01 97       	sbiw	r24, 0x01	; 1
    2dc6:	f1 f7       	brne	.-4      	; 0x2dc4 <main+0x40a>
    2dc8:	9c 83       	std	Y+4, r25	; 0x04
    2dca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dce:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	9e 83       	std	Y+6, r25	; 0x06
    2dd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dda:	00 97       	sbiw	r24, 0x00	; 0
    2ddc:	69 f7       	brne	.-38     	; 0x2db8 <main+0x3fe>
    2dde:	14 c0       	rjmp	.+40     	; 0x2e08 <main+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de0:	6f 81       	ldd	r22, Y+7	; 0x07
    2de2:	78 85       	ldd	r23, Y+8	; 0x08
    2de4:	89 85       	ldd	r24, Y+9	; 0x09
    2de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	9e 83       	std	Y+6, r25	; 0x06
    2df2:	8d 83       	std	Y+5, r24	; 0x05
    2df4:	8d 81       	ldd	r24, Y+5	; 0x05
    2df6:	9e 81       	ldd	r25, Y+6	; 0x06
    2df8:	9a 83       	std	Y+2, r25	; 0x02
    2dfa:	89 83       	std	Y+1, r24	; 0x01
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	f1 f7       	brne	.-4      	; 0x2e00 <main+0x446>
    2e04:	9a 83       	std	Y+2, r25	; 0x02
    2e06:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		I2C_Master_Write(&handle);
    2e08:	ce 01       	movw	r24, r28
    2e0a:	49 96       	adiw	r24, 0x19	; 25
    2e0c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <I2C_Master_Write>
		I2C_End();
    2e10:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <I2C_End>
				}
	}



	for (u16 i =0; i <8;i++){
    2e14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e16:	98 89       	ldd	r25, Y+16	; 0x10
    2e18:	01 96       	adiw	r24, 0x01	; 1
    2e1a:	98 8b       	std	Y+16, r25	; 0x10
    2e1c:	8f 87       	std	Y+15, r24	; 0x0f
    2e1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e20:	98 89       	ldd	r25, Y+16	; 0x10
    2e22:	88 30       	cpi	r24, 0x08	; 8
    2e24:	91 05       	cpc	r25, r1
    2e26:	08 f4       	brcc	.+2      	; 0x2e2a <main+0x470>
    2e28:	61 cf       	rjmp	.-318    	; 0x2cec <main+0x332>

	}



}
    2e2a:	cd 58       	subi	r28, 0x8D	; 141
    2e2c:	df 4f       	sbci	r29, 0xFF	; 255
    2e2e:	0f b6       	in	r0, 0x3f	; 63
    2e30:	f8 94       	cli
    2e32:	de bf       	out	0x3e, r29	; 62
    2e34:	0f be       	out	0x3f, r0	; 63
    2e36:	cd bf       	out	0x3d, r28	; 61
    2e38:	cf 91       	pop	r28
    2e3a:	df 91       	pop	r29
    2e3c:	08 95       	ret

00002e3e <__udivmodhi4>:
    2e3e:	aa 1b       	sub	r26, r26
    2e40:	bb 1b       	sub	r27, r27
    2e42:	51 e1       	ldi	r21, 0x11	; 17
    2e44:	07 c0       	rjmp	.+14     	; 0x2e54 <__udivmodhi4_ep>

00002e46 <__udivmodhi4_loop>:
    2e46:	aa 1f       	adc	r26, r26
    2e48:	bb 1f       	adc	r27, r27
    2e4a:	a6 17       	cp	r26, r22
    2e4c:	b7 07       	cpc	r27, r23
    2e4e:	10 f0       	brcs	.+4      	; 0x2e54 <__udivmodhi4_ep>
    2e50:	a6 1b       	sub	r26, r22
    2e52:	b7 0b       	sbc	r27, r23

00002e54 <__udivmodhi4_ep>:
    2e54:	88 1f       	adc	r24, r24
    2e56:	99 1f       	adc	r25, r25
    2e58:	5a 95       	dec	r21
    2e5a:	a9 f7       	brne	.-22     	; 0x2e46 <__udivmodhi4_loop>
    2e5c:	80 95       	com	r24
    2e5e:	90 95       	com	r25
    2e60:	bc 01       	movw	r22, r24
    2e62:	cd 01       	movw	r24, r26
    2e64:	08 95       	ret

00002e66 <__udivmodsi4>:
    2e66:	a1 e2       	ldi	r26, 0x21	; 33
    2e68:	1a 2e       	mov	r1, r26
    2e6a:	aa 1b       	sub	r26, r26
    2e6c:	bb 1b       	sub	r27, r27
    2e6e:	fd 01       	movw	r30, r26
    2e70:	0d c0       	rjmp	.+26     	; 0x2e8c <__udivmodsi4_ep>

00002e72 <__udivmodsi4_loop>:
    2e72:	aa 1f       	adc	r26, r26
    2e74:	bb 1f       	adc	r27, r27
    2e76:	ee 1f       	adc	r30, r30
    2e78:	ff 1f       	adc	r31, r31
    2e7a:	a2 17       	cp	r26, r18
    2e7c:	b3 07       	cpc	r27, r19
    2e7e:	e4 07       	cpc	r30, r20
    2e80:	f5 07       	cpc	r31, r21
    2e82:	20 f0       	brcs	.+8      	; 0x2e8c <__udivmodsi4_ep>
    2e84:	a2 1b       	sub	r26, r18
    2e86:	b3 0b       	sbc	r27, r19
    2e88:	e4 0b       	sbc	r30, r20
    2e8a:	f5 0b       	sbc	r31, r21

00002e8c <__udivmodsi4_ep>:
    2e8c:	66 1f       	adc	r22, r22
    2e8e:	77 1f       	adc	r23, r23
    2e90:	88 1f       	adc	r24, r24
    2e92:	99 1f       	adc	r25, r25
    2e94:	1a 94       	dec	r1
    2e96:	69 f7       	brne	.-38     	; 0x2e72 <__udivmodsi4_loop>
    2e98:	60 95       	com	r22
    2e9a:	70 95       	com	r23
    2e9c:	80 95       	com	r24
    2e9e:	90 95       	com	r25
    2ea0:	9b 01       	movw	r18, r22
    2ea2:	ac 01       	movw	r20, r24
    2ea4:	bd 01       	movw	r22, r26
    2ea6:	cf 01       	movw	r24, r30
    2ea8:	08 95       	ret

00002eaa <__prologue_saves__>:
    2eaa:	2f 92       	push	r2
    2eac:	3f 92       	push	r3
    2eae:	4f 92       	push	r4
    2eb0:	5f 92       	push	r5
    2eb2:	6f 92       	push	r6
    2eb4:	7f 92       	push	r7
    2eb6:	8f 92       	push	r8
    2eb8:	9f 92       	push	r9
    2eba:	af 92       	push	r10
    2ebc:	bf 92       	push	r11
    2ebe:	cf 92       	push	r12
    2ec0:	df 92       	push	r13
    2ec2:	ef 92       	push	r14
    2ec4:	ff 92       	push	r15
    2ec6:	0f 93       	push	r16
    2ec8:	1f 93       	push	r17
    2eca:	cf 93       	push	r28
    2ecc:	df 93       	push	r29
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
    2ed2:	ca 1b       	sub	r28, r26
    2ed4:	db 0b       	sbc	r29, r27
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	de bf       	out	0x3e, r29	; 62
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	cd bf       	out	0x3d, r28	; 61
    2ee0:	09 94       	ijmp

00002ee2 <__epilogue_restores__>:
    2ee2:	2a 88       	ldd	r2, Y+18	; 0x12
    2ee4:	39 88       	ldd	r3, Y+17	; 0x11
    2ee6:	48 88       	ldd	r4, Y+16	; 0x10
    2ee8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2eea:	6e 84       	ldd	r6, Y+14	; 0x0e
    2eec:	7d 84       	ldd	r7, Y+13	; 0x0d
    2eee:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ef0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ef2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ef4:	b9 84       	ldd	r11, Y+9	; 0x09
    2ef6:	c8 84       	ldd	r12, Y+8	; 0x08
    2ef8:	df 80       	ldd	r13, Y+7	; 0x07
    2efa:	ee 80       	ldd	r14, Y+6	; 0x06
    2efc:	fd 80       	ldd	r15, Y+5	; 0x05
    2efe:	0c 81       	ldd	r16, Y+4	; 0x04
    2f00:	1b 81       	ldd	r17, Y+3	; 0x03
    2f02:	aa 81       	ldd	r26, Y+2	; 0x02
    2f04:	b9 81       	ldd	r27, Y+1	; 0x01
    2f06:	ce 0f       	add	r28, r30
    2f08:	d1 1d       	adc	r29, r1
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	f8 94       	cli
    2f0e:	de bf       	out	0x3e, r29	; 62
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	cd bf       	out	0x3d, r28	; 61
    2f14:	ed 01       	movw	r28, r26
    2f16:	08 95       	ret

00002f18 <atoi>:
    2f18:	fc 01       	movw	r30, r24
    2f1a:	88 27       	eor	r24, r24
    2f1c:	99 27       	eor	r25, r25
    2f1e:	e8 94       	clt
    2f20:	21 91       	ld	r18, Z+
    2f22:	20 32       	cpi	r18, 0x20	; 32
    2f24:	e9 f3       	breq	.-6      	; 0x2f20 <atoi+0x8>
    2f26:	29 30       	cpi	r18, 0x09	; 9
    2f28:	10 f0       	brcs	.+4      	; 0x2f2e <atoi+0x16>
    2f2a:	2e 30       	cpi	r18, 0x0E	; 14
    2f2c:	c8 f3       	brcs	.-14     	; 0x2f20 <atoi+0x8>
    2f2e:	2b 32       	cpi	r18, 0x2B	; 43
    2f30:	41 f0       	breq	.+16     	; 0x2f42 <atoi+0x2a>
    2f32:	2d 32       	cpi	r18, 0x2D	; 45
    2f34:	39 f4       	brne	.+14     	; 0x2f44 <atoi+0x2c>
    2f36:	68 94       	set
    2f38:	04 c0       	rjmp	.+8      	; 0x2f42 <atoi+0x2a>
    2f3a:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__mulhi_const_10>
    2f3e:	82 0f       	add	r24, r18
    2f40:	91 1d       	adc	r25, r1
    2f42:	21 91       	ld	r18, Z+
    2f44:	20 53       	subi	r18, 0x30	; 48
    2f46:	2a 30       	cpi	r18, 0x0A	; 10
    2f48:	c0 f3       	brcs	.-16     	; 0x2f3a <atoi+0x22>
    2f4a:	1e f4       	brtc	.+6      	; 0x2f52 <atoi+0x3a>
    2f4c:	90 95       	com	r25
    2f4e:	81 95       	neg	r24
    2f50:	9f 4f       	sbci	r25, 0xFF	; 255
    2f52:	08 95       	ret

00002f54 <strcpy>:
    2f54:	fb 01       	movw	r30, r22
    2f56:	dc 01       	movw	r26, r24
    2f58:	01 90       	ld	r0, Z+
    2f5a:	0d 92       	st	X+, r0
    2f5c:	00 20       	and	r0, r0
    2f5e:	e1 f7       	brne	.-8      	; 0x2f58 <strcpy+0x4>
    2f60:	08 95       	ret

00002f62 <strlen>:
    2f62:	fc 01       	movw	r30, r24
    2f64:	01 90       	ld	r0, Z+
    2f66:	00 20       	and	r0, r0
    2f68:	e9 f7       	brne	.-6      	; 0x2f64 <strlen+0x2>
    2f6a:	80 95       	com	r24
    2f6c:	90 95       	com	r25
    2f6e:	8e 0f       	add	r24, r30
    2f70:	9f 1f       	adc	r25, r31
    2f72:	08 95       	ret

00002f74 <__mulhi_const_10>:
    2f74:	7a e0       	ldi	r23, 0x0A	; 10
    2f76:	97 9f       	mul	r25, r23
    2f78:	90 2d       	mov	r25, r0
    2f7a:	87 9f       	mul	r24, r23
    2f7c:	80 2d       	mov	r24, r0
    2f7e:	91 0d       	add	r25, r1
    2f80:	11 24       	eor	r1, r1
    2f82:	08 95       	ret

00002f84 <sprintf>:
    2f84:	ae e0       	ldi	r26, 0x0E	; 14
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	e8 ec       	ldi	r30, 0xC8	; 200
    2f8a:	f7 e1       	ldi	r31, 0x17	; 23
    2f8c:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <__prologue_saves__+0x1c>
    2f90:	0d 89       	ldd	r16, Y+21	; 0x15
    2f92:	1e 89       	ldd	r17, Y+22	; 0x16
    2f94:	86 e0       	ldi	r24, 0x06	; 6
    2f96:	8c 83       	std	Y+4, r24	; 0x04
    2f98:	1a 83       	std	Y+2, r17	; 0x02
    2f9a:	09 83       	std	Y+1, r16	; 0x01
    2f9c:	8f ef       	ldi	r24, 0xFF	; 255
    2f9e:	9f e7       	ldi	r25, 0x7F	; 127
    2fa0:	9e 83       	std	Y+6, r25	; 0x06
    2fa2:	8d 83       	std	Y+5, r24	; 0x05
    2fa4:	9e 01       	movw	r18, r28
    2fa6:	27 5e       	subi	r18, 0xE7	; 231
    2fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    2faa:	ce 01       	movw	r24, r28
    2fac:	01 96       	adiw	r24, 0x01	; 1
    2fae:	6f 89       	ldd	r22, Y+23	; 0x17
    2fb0:	78 8d       	ldd	r23, Y+24	; 0x18
    2fb2:	a9 01       	movw	r20, r18
    2fb4:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <vfprintf>
    2fb8:	2f 81       	ldd	r18, Y+7	; 0x07
    2fba:	38 85       	ldd	r19, Y+8	; 0x08
    2fbc:	02 0f       	add	r16, r18
    2fbe:	13 1f       	adc	r17, r19
    2fc0:	f8 01       	movw	r30, r16
    2fc2:	10 82       	st	Z, r1
    2fc4:	2e 96       	adiw	r28, 0x0e	; 14
    2fc6:	e4 e0       	ldi	r30, 0x04	; 4
    2fc8:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__epilogue_restores__+0x1c>

00002fcc <vfprintf>:
    2fcc:	ab e0       	ldi	r26, 0x0B	; 11
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	ec ee       	ldi	r30, 0xEC	; 236
    2fd2:	f7 e1       	ldi	r31, 0x17	; 23
    2fd4:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__prologue_saves__>
    2fd8:	3c 01       	movw	r6, r24
    2fda:	2b 01       	movw	r4, r22
    2fdc:	5a 01       	movw	r10, r20
    2fde:	fc 01       	movw	r30, r24
    2fe0:	17 82       	std	Z+7, r1	; 0x07
    2fe2:	16 82       	std	Z+6, r1	; 0x06
    2fe4:	83 81       	ldd	r24, Z+3	; 0x03
    2fe6:	81 fd       	sbrc	r24, 1
    2fe8:	03 c0       	rjmp	.+6      	; 0x2ff0 <vfprintf+0x24>
    2fea:	6f ef       	ldi	r22, 0xFF	; 255
    2fec:	7f ef       	ldi	r23, 0xFF	; 255
    2fee:	c6 c1       	rjmp	.+908    	; 0x337c <vfprintf+0x3b0>
    2ff0:	9a e0       	ldi	r25, 0x0A	; 10
    2ff2:	89 2e       	mov	r8, r25
    2ff4:	1e 01       	movw	r2, r28
    2ff6:	08 94       	sec
    2ff8:	21 1c       	adc	r2, r1
    2ffa:	31 1c       	adc	r3, r1
    2ffc:	f3 01       	movw	r30, r6
    2ffe:	23 81       	ldd	r18, Z+3	; 0x03
    3000:	f2 01       	movw	r30, r4
    3002:	23 fd       	sbrc	r18, 3
    3004:	85 91       	lpm	r24, Z+
    3006:	23 ff       	sbrs	r18, 3
    3008:	81 91       	ld	r24, Z+
    300a:	2f 01       	movw	r4, r30
    300c:	88 23       	and	r24, r24
    300e:	09 f4       	brne	.+2      	; 0x3012 <vfprintf+0x46>
    3010:	b2 c1       	rjmp	.+868    	; 0x3376 <vfprintf+0x3aa>
    3012:	85 32       	cpi	r24, 0x25	; 37
    3014:	39 f4       	brne	.+14     	; 0x3024 <vfprintf+0x58>
    3016:	23 fd       	sbrc	r18, 3
    3018:	85 91       	lpm	r24, Z+
    301a:	23 ff       	sbrs	r18, 3
    301c:	81 91       	ld	r24, Z+
    301e:	2f 01       	movw	r4, r30
    3020:	85 32       	cpi	r24, 0x25	; 37
    3022:	29 f4       	brne	.+10     	; 0x302e <vfprintf+0x62>
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	b3 01       	movw	r22, r6
    3028:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <fputc>
    302c:	e7 cf       	rjmp	.-50     	; 0x2ffc <vfprintf+0x30>
    302e:	98 2f       	mov	r25, r24
    3030:	ff 24       	eor	r15, r15
    3032:	ee 24       	eor	r14, r14
    3034:	99 24       	eor	r9, r9
    3036:	ff e1       	ldi	r31, 0x1F	; 31
    3038:	ff 15       	cp	r31, r15
    303a:	d0 f0       	brcs	.+52     	; 0x3070 <vfprintf+0xa4>
    303c:	9b 32       	cpi	r25, 0x2B	; 43
    303e:	69 f0       	breq	.+26     	; 0x305a <vfprintf+0x8e>
    3040:	9c 32       	cpi	r25, 0x2C	; 44
    3042:	28 f4       	brcc	.+10     	; 0x304e <vfprintf+0x82>
    3044:	90 32       	cpi	r25, 0x20	; 32
    3046:	59 f0       	breq	.+22     	; 0x305e <vfprintf+0x92>
    3048:	93 32       	cpi	r25, 0x23	; 35
    304a:	91 f4       	brne	.+36     	; 0x3070 <vfprintf+0xa4>
    304c:	0e c0       	rjmp	.+28     	; 0x306a <vfprintf+0x9e>
    304e:	9d 32       	cpi	r25, 0x2D	; 45
    3050:	49 f0       	breq	.+18     	; 0x3064 <vfprintf+0x98>
    3052:	90 33       	cpi	r25, 0x30	; 48
    3054:	69 f4       	brne	.+26     	; 0x3070 <vfprintf+0xa4>
    3056:	41 e0       	ldi	r20, 0x01	; 1
    3058:	24 c0       	rjmp	.+72     	; 0x30a2 <vfprintf+0xd6>
    305a:	52 e0       	ldi	r21, 0x02	; 2
    305c:	f5 2a       	or	r15, r21
    305e:	84 e0       	ldi	r24, 0x04	; 4
    3060:	f8 2a       	or	r15, r24
    3062:	28 c0       	rjmp	.+80     	; 0x30b4 <vfprintf+0xe8>
    3064:	98 e0       	ldi	r25, 0x08	; 8
    3066:	f9 2a       	or	r15, r25
    3068:	25 c0       	rjmp	.+74     	; 0x30b4 <vfprintf+0xe8>
    306a:	e0 e1       	ldi	r30, 0x10	; 16
    306c:	fe 2a       	or	r15, r30
    306e:	22 c0       	rjmp	.+68     	; 0x30b4 <vfprintf+0xe8>
    3070:	f7 fc       	sbrc	r15, 7
    3072:	29 c0       	rjmp	.+82     	; 0x30c6 <vfprintf+0xfa>
    3074:	89 2f       	mov	r24, r25
    3076:	80 53       	subi	r24, 0x30	; 48
    3078:	8a 30       	cpi	r24, 0x0A	; 10
    307a:	70 f4       	brcc	.+28     	; 0x3098 <vfprintf+0xcc>
    307c:	f6 fe       	sbrs	r15, 6
    307e:	05 c0       	rjmp	.+10     	; 0x308a <vfprintf+0xbe>
    3080:	98 9c       	mul	r9, r8
    3082:	90 2c       	mov	r9, r0
    3084:	11 24       	eor	r1, r1
    3086:	98 0e       	add	r9, r24
    3088:	15 c0       	rjmp	.+42     	; 0x30b4 <vfprintf+0xe8>
    308a:	e8 9c       	mul	r14, r8
    308c:	e0 2c       	mov	r14, r0
    308e:	11 24       	eor	r1, r1
    3090:	e8 0e       	add	r14, r24
    3092:	f0 e2       	ldi	r31, 0x20	; 32
    3094:	ff 2a       	or	r15, r31
    3096:	0e c0       	rjmp	.+28     	; 0x30b4 <vfprintf+0xe8>
    3098:	9e 32       	cpi	r25, 0x2E	; 46
    309a:	29 f4       	brne	.+10     	; 0x30a6 <vfprintf+0xda>
    309c:	f6 fc       	sbrc	r15, 6
    309e:	6b c1       	rjmp	.+726    	; 0x3376 <vfprintf+0x3aa>
    30a0:	40 e4       	ldi	r20, 0x40	; 64
    30a2:	f4 2a       	or	r15, r20
    30a4:	07 c0       	rjmp	.+14     	; 0x30b4 <vfprintf+0xe8>
    30a6:	9c 36       	cpi	r25, 0x6C	; 108
    30a8:	19 f4       	brne	.+6      	; 0x30b0 <vfprintf+0xe4>
    30aa:	50 e8       	ldi	r21, 0x80	; 128
    30ac:	f5 2a       	or	r15, r21
    30ae:	02 c0       	rjmp	.+4      	; 0x30b4 <vfprintf+0xe8>
    30b0:	98 36       	cpi	r25, 0x68	; 104
    30b2:	49 f4       	brne	.+18     	; 0x30c6 <vfprintf+0xfa>
    30b4:	f2 01       	movw	r30, r4
    30b6:	23 fd       	sbrc	r18, 3
    30b8:	95 91       	lpm	r25, Z+
    30ba:	23 ff       	sbrs	r18, 3
    30bc:	91 91       	ld	r25, Z+
    30be:	2f 01       	movw	r4, r30
    30c0:	99 23       	and	r25, r25
    30c2:	09 f0       	breq	.+2      	; 0x30c6 <vfprintf+0xfa>
    30c4:	b8 cf       	rjmp	.-144    	; 0x3036 <vfprintf+0x6a>
    30c6:	89 2f       	mov	r24, r25
    30c8:	85 54       	subi	r24, 0x45	; 69
    30ca:	83 30       	cpi	r24, 0x03	; 3
    30cc:	18 f0       	brcs	.+6      	; 0x30d4 <vfprintf+0x108>
    30ce:	80 52       	subi	r24, 0x20	; 32
    30d0:	83 30       	cpi	r24, 0x03	; 3
    30d2:	38 f4       	brcc	.+14     	; 0x30e2 <vfprintf+0x116>
    30d4:	44 e0       	ldi	r20, 0x04	; 4
    30d6:	50 e0       	ldi	r21, 0x00	; 0
    30d8:	a4 0e       	add	r10, r20
    30da:	b5 1e       	adc	r11, r21
    30dc:	5f e3       	ldi	r21, 0x3F	; 63
    30de:	59 83       	std	Y+1, r21	; 0x01
    30e0:	0f c0       	rjmp	.+30     	; 0x3100 <vfprintf+0x134>
    30e2:	93 36       	cpi	r25, 0x63	; 99
    30e4:	31 f0       	breq	.+12     	; 0x30f2 <vfprintf+0x126>
    30e6:	93 37       	cpi	r25, 0x73	; 115
    30e8:	79 f0       	breq	.+30     	; 0x3108 <vfprintf+0x13c>
    30ea:	93 35       	cpi	r25, 0x53	; 83
    30ec:	09 f0       	breq	.+2      	; 0x30f0 <vfprintf+0x124>
    30ee:	56 c0       	rjmp	.+172    	; 0x319c <vfprintf+0x1d0>
    30f0:	20 c0       	rjmp	.+64     	; 0x3132 <vfprintf+0x166>
    30f2:	f5 01       	movw	r30, r10
    30f4:	80 81       	ld	r24, Z
    30f6:	89 83       	std	Y+1, r24	; 0x01
    30f8:	42 e0       	ldi	r20, 0x02	; 2
    30fa:	50 e0       	ldi	r21, 0x00	; 0
    30fc:	a4 0e       	add	r10, r20
    30fe:	b5 1e       	adc	r11, r21
    3100:	61 01       	movw	r12, r2
    3102:	01 e0       	ldi	r16, 0x01	; 1
    3104:	10 e0       	ldi	r17, 0x00	; 0
    3106:	12 c0       	rjmp	.+36     	; 0x312c <vfprintf+0x160>
    3108:	f5 01       	movw	r30, r10
    310a:	c0 80       	ld	r12, Z
    310c:	d1 80       	ldd	r13, Z+1	; 0x01
    310e:	f6 fc       	sbrc	r15, 6
    3110:	03 c0       	rjmp	.+6      	; 0x3118 <vfprintf+0x14c>
    3112:	6f ef       	ldi	r22, 0xFF	; 255
    3114:	7f ef       	ldi	r23, 0xFF	; 255
    3116:	02 c0       	rjmp	.+4      	; 0x311c <vfprintf+0x150>
    3118:	69 2d       	mov	r22, r9
    311a:	70 e0       	ldi	r23, 0x00	; 0
    311c:	42 e0       	ldi	r20, 0x02	; 2
    311e:	50 e0       	ldi	r21, 0x00	; 0
    3120:	a4 0e       	add	r10, r20
    3122:	b5 1e       	adc	r11, r21
    3124:	c6 01       	movw	r24, r12
    3126:	0e 94 ce 19 	call	0x339c	; 0x339c <strnlen>
    312a:	8c 01       	movw	r16, r24
    312c:	5f e7       	ldi	r21, 0x7F	; 127
    312e:	f5 22       	and	r15, r21
    3130:	14 c0       	rjmp	.+40     	; 0x315a <vfprintf+0x18e>
    3132:	f5 01       	movw	r30, r10
    3134:	c0 80       	ld	r12, Z
    3136:	d1 80       	ldd	r13, Z+1	; 0x01
    3138:	f6 fc       	sbrc	r15, 6
    313a:	03 c0       	rjmp	.+6      	; 0x3142 <vfprintf+0x176>
    313c:	6f ef       	ldi	r22, 0xFF	; 255
    313e:	7f ef       	ldi	r23, 0xFF	; 255
    3140:	02 c0       	rjmp	.+4      	; 0x3146 <vfprintf+0x17a>
    3142:	69 2d       	mov	r22, r9
    3144:	70 e0       	ldi	r23, 0x00	; 0
    3146:	42 e0       	ldi	r20, 0x02	; 2
    3148:	50 e0       	ldi	r21, 0x00	; 0
    314a:	a4 0e       	add	r10, r20
    314c:	b5 1e       	adc	r11, r21
    314e:	c6 01       	movw	r24, r12
    3150:	0e 94 c3 19 	call	0x3386	; 0x3386 <strnlen_P>
    3154:	8c 01       	movw	r16, r24
    3156:	50 e8       	ldi	r21, 0x80	; 128
    3158:	f5 2a       	or	r15, r21
    315a:	f3 fe       	sbrs	r15, 3
    315c:	07 c0       	rjmp	.+14     	; 0x316c <vfprintf+0x1a0>
    315e:	1a c0       	rjmp	.+52     	; 0x3194 <vfprintf+0x1c8>
    3160:	80 e2       	ldi	r24, 0x20	; 32
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	b3 01       	movw	r22, r6
    3166:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <fputc>
    316a:	ea 94       	dec	r14
    316c:	8e 2d       	mov	r24, r14
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	08 17       	cp	r16, r24
    3172:	19 07       	cpc	r17, r25
    3174:	a8 f3       	brcs	.-22     	; 0x3160 <vfprintf+0x194>
    3176:	0e c0       	rjmp	.+28     	; 0x3194 <vfprintf+0x1c8>
    3178:	f6 01       	movw	r30, r12
    317a:	f7 fc       	sbrc	r15, 7
    317c:	85 91       	lpm	r24, Z+
    317e:	f7 fe       	sbrs	r15, 7
    3180:	81 91       	ld	r24, Z+
    3182:	6f 01       	movw	r12, r30
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	b3 01       	movw	r22, r6
    3188:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <fputc>
    318c:	e1 10       	cpse	r14, r1
    318e:	ea 94       	dec	r14
    3190:	01 50       	subi	r16, 0x01	; 1
    3192:	10 40       	sbci	r17, 0x00	; 0
    3194:	01 15       	cp	r16, r1
    3196:	11 05       	cpc	r17, r1
    3198:	79 f7       	brne	.-34     	; 0x3178 <vfprintf+0x1ac>
    319a:	ea c0       	rjmp	.+468    	; 0x3370 <vfprintf+0x3a4>
    319c:	94 36       	cpi	r25, 0x64	; 100
    319e:	11 f0       	breq	.+4      	; 0x31a4 <vfprintf+0x1d8>
    31a0:	99 36       	cpi	r25, 0x69	; 105
    31a2:	69 f5       	brne	.+90     	; 0x31fe <vfprintf+0x232>
    31a4:	f7 fe       	sbrs	r15, 7
    31a6:	08 c0       	rjmp	.+16     	; 0x31b8 <vfprintf+0x1ec>
    31a8:	f5 01       	movw	r30, r10
    31aa:	20 81       	ld	r18, Z
    31ac:	31 81       	ldd	r19, Z+1	; 0x01
    31ae:	42 81       	ldd	r20, Z+2	; 0x02
    31b0:	53 81       	ldd	r21, Z+3	; 0x03
    31b2:	84 e0       	ldi	r24, 0x04	; 4
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	0a c0       	rjmp	.+20     	; 0x31cc <vfprintf+0x200>
    31b8:	f5 01       	movw	r30, r10
    31ba:	80 81       	ld	r24, Z
    31bc:	91 81       	ldd	r25, Z+1	; 0x01
    31be:	9c 01       	movw	r18, r24
    31c0:	44 27       	eor	r20, r20
    31c2:	37 fd       	sbrc	r19, 7
    31c4:	40 95       	com	r20
    31c6:	54 2f       	mov	r21, r20
    31c8:	82 e0       	ldi	r24, 0x02	; 2
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	a8 0e       	add	r10, r24
    31ce:	b9 1e       	adc	r11, r25
    31d0:	9f e6       	ldi	r25, 0x6F	; 111
    31d2:	f9 22       	and	r15, r25
    31d4:	57 ff       	sbrs	r21, 7
    31d6:	09 c0       	rjmp	.+18     	; 0x31ea <vfprintf+0x21e>
    31d8:	50 95       	com	r21
    31da:	40 95       	com	r20
    31dc:	30 95       	com	r19
    31de:	21 95       	neg	r18
    31e0:	3f 4f       	sbci	r19, 0xFF	; 255
    31e2:	4f 4f       	sbci	r20, 0xFF	; 255
    31e4:	5f 4f       	sbci	r21, 0xFF	; 255
    31e6:	e0 e8       	ldi	r30, 0x80	; 128
    31e8:	fe 2a       	or	r15, r30
    31ea:	ca 01       	movw	r24, r20
    31ec:	b9 01       	movw	r22, r18
    31ee:	a1 01       	movw	r20, r2
    31f0:	2a e0       	ldi	r18, 0x0A	; 10
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	0e 94 05 1a 	call	0x340a	; 0x340a <__ultoa_invert>
    31f8:	d8 2e       	mov	r13, r24
    31fa:	d2 18       	sub	r13, r2
    31fc:	40 c0       	rjmp	.+128    	; 0x327e <vfprintf+0x2b2>
    31fe:	95 37       	cpi	r25, 0x75	; 117
    3200:	29 f4       	brne	.+10     	; 0x320c <vfprintf+0x240>
    3202:	1f 2d       	mov	r17, r15
    3204:	1f 7e       	andi	r17, 0xEF	; 239
    3206:	2a e0       	ldi	r18, 0x0A	; 10
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	1d c0       	rjmp	.+58     	; 0x3246 <vfprintf+0x27a>
    320c:	1f 2d       	mov	r17, r15
    320e:	19 7f       	andi	r17, 0xF9	; 249
    3210:	9f 36       	cpi	r25, 0x6F	; 111
    3212:	61 f0       	breq	.+24     	; 0x322c <vfprintf+0x260>
    3214:	90 37       	cpi	r25, 0x70	; 112
    3216:	20 f4       	brcc	.+8      	; 0x3220 <vfprintf+0x254>
    3218:	98 35       	cpi	r25, 0x58	; 88
    321a:	09 f0       	breq	.+2      	; 0x321e <vfprintf+0x252>
    321c:	ac c0       	rjmp	.+344    	; 0x3376 <vfprintf+0x3aa>
    321e:	0f c0       	rjmp	.+30     	; 0x323e <vfprintf+0x272>
    3220:	90 37       	cpi	r25, 0x70	; 112
    3222:	39 f0       	breq	.+14     	; 0x3232 <vfprintf+0x266>
    3224:	98 37       	cpi	r25, 0x78	; 120
    3226:	09 f0       	breq	.+2      	; 0x322a <vfprintf+0x25e>
    3228:	a6 c0       	rjmp	.+332    	; 0x3376 <vfprintf+0x3aa>
    322a:	04 c0       	rjmp	.+8      	; 0x3234 <vfprintf+0x268>
    322c:	28 e0       	ldi	r18, 0x08	; 8
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	0a c0       	rjmp	.+20     	; 0x3246 <vfprintf+0x27a>
    3232:	10 61       	ori	r17, 0x10	; 16
    3234:	14 fd       	sbrc	r17, 4
    3236:	14 60       	ori	r17, 0x04	; 4
    3238:	20 e1       	ldi	r18, 0x10	; 16
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	04 c0       	rjmp	.+8      	; 0x3246 <vfprintf+0x27a>
    323e:	14 fd       	sbrc	r17, 4
    3240:	16 60       	ori	r17, 0x06	; 6
    3242:	20 e1       	ldi	r18, 0x10	; 16
    3244:	32 e0       	ldi	r19, 0x02	; 2
    3246:	17 ff       	sbrs	r17, 7
    3248:	08 c0       	rjmp	.+16     	; 0x325a <vfprintf+0x28e>
    324a:	f5 01       	movw	r30, r10
    324c:	60 81       	ld	r22, Z
    324e:	71 81       	ldd	r23, Z+1	; 0x01
    3250:	82 81       	ldd	r24, Z+2	; 0x02
    3252:	93 81       	ldd	r25, Z+3	; 0x03
    3254:	44 e0       	ldi	r20, 0x04	; 4
    3256:	50 e0       	ldi	r21, 0x00	; 0
    3258:	08 c0       	rjmp	.+16     	; 0x326a <vfprintf+0x29e>
    325a:	f5 01       	movw	r30, r10
    325c:	80 81       	ld	r24, Z
    325e:	91 81       	ldd	r25, Z+1	; 0x01
    3260:	bc 01       	movw	r22, r24
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	42 e0       	ldi	r20, 0x02	; 2
    3268:	50 e0       	ldi	r21, 0x00	; 0
    326a:	a4 0e       	add	r10, r20
    326c:	b5 1e       	adc	r11, r21
    326e:	a1 01       	movw	r20, r2
    3270:	0e 94 05 1a 	call	0x340a	; 0x340a <__ultoa_invert>
    3274:	d8 2e       	mov	r13, r24
    3276:	d2 18       	sub	r13, r2
    3278:	8f e7       	ldi	r24, 0x7F	; 127
    327a:	f8 2e       	mov	r15, r24
    327c:	f1 22       	and	r15, r17
    327e:	f6 fe       	sbrs	r15, 6
    3280:	0b c0       	rjmp	.+22     	; 0x3298 <vfprintf+0x2cc>
    3282:	5e ef       	ldi	r21, 0xFE	; 254
    3284:	f5 22       	and	r15, r21
    3286:	d9 14       	cp	r13, r9
    3288:	38 f4       	brcc	.+14     	; 0x3298 <vfprintf+0x2cc>
    328a:	f4 fe       	sbrs	r15, 4
    328c:	07 c0       	rjmp	.+14     	; 0x329c <vfprintf+0x2d0>
    328e:	f2 fc       	sbrc	r15, 2
    3290:	05 c0       	rjmp	.+10     	; 0x329c <vfprintf+0x2d0>
    3292:	8f ee       	ldi	r24, 0xEF	; 239
    3294:	f8 22       	and	r15, r24
    3296:	02 c0       	rjmp	.+4      	; 0x329c <vfprintf+0x2d0>
    3298:	1d 2d       	mov	r17, r13
    329a:	01 c0       	rjmp	.+2      	; 0x329e <vfprintf+0x2d2>
    329c:	19 2d       	mov	r17, r9
    329e:	f4 fe       	sbrs	r15, 4
    32a0:	0d c0       	rjmp	.+26     	; 0x32bc <vfprintf+0x2f0>
    32a2:	fe 01       	movw	r30, r28
    32a4:	ed 0d       	add	r30, r13
    32a6:	f1 1d       	adc	r31, r1
    32a8:	80 81       	ld	r24, Z
    32aa:	80 33       	cpi	r24, 0x30	; 48
    32ac:	19 f4       	brne	.+6      	; 0x32b4 <vfprintf+0x2e8>
    32ae:	99 ee       	ldi	r25, 0xE9	; 233
    32b0:	f9 22       	and	r15, r25
    32b2:	08 c0       	rjmp	.+16     	; 0x32c4 <vfprintf+0x2f8>
    32b4:	1f 5f       	subi	r17, 0xFF	; 255
    32b6:	f2 fe       	sbrs	r15, 2
    32b8:	05 c0       	rjmp	.+10     	; 0x32c4 <vfprintf+0x2f8>
    32ba:	03 c0       	rjmp	.+6      	; 0x32c2 <vfprintf+0x2f6>
    32bc:	8f 2d       	mov	r24, r15
    32be:	86 78       	andi	r24, 0x86	; 134
    32c0:	09 f0       	breq	.+2      	; 0x32c4 <vfprintf+0x2f8>
    32c2:	1f 5f       	subi	r17, 0xFF	; 255
    32c4:	0f 2d       	mov	r16, r15
    32c6:	f3 fc       	sbrc	r15, 3
    32c8:	14 c0       	rjmp	.+40     	; 0x32f2 <vfprintf+0x326>
    32ca:	f0 fe       	sbrs	r15, 0
    32cc:	0f c0       	rjmp	.+30     	; 0x32ec <vfprintf+0x320>
    32ce:	1e 15       	cp	r17, r14
    32d0:	10 f0       	brcs	.+4      	; 0x32d6 <vfprintf+0x30a>
    32d2:	9d 2c       	mov	r9, r13
    32d4:	0b c0       	rjmp	.+22     	; 0x32ec <vfprintf+0x320>
    32d6:	9d 2c       	mov	r9, r13
    32d8:	9e 0c       	add	r9, r14
    32da:	91 1a       	sub	r9, r17
    32dc:	1e 2d       	mov	r17, r14
    32de:	06 c0       	rjmp	.+12     	; 0x32ec <vfprintf+0x320>
    32e0:	80 e2       	ldi	r24, 0x20	; 32
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	b3 01       	movw	r22, r6
    32e6:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <fputc>
    32ea:	1f 5f       	subi	r17, 0xFF	; 255
    32ec:	1e 15       	cp	r17, r14
    32ee:	c0 f3       	brcs	.-16     	; 0x32e0 <vfprintf+0x314>
    32f0:	04 c0       	rjmp	.+8      	; 0x32fa <vfprintf+0x32e>
    32f2:	1e 15       	cp	r17, r14
    32f4:	10 f4       	brcc	.+4      	; 0x32fa <vfprintf+0x32e>
    32f6:	e1 1a       	sub	r14, r17
    32f8:	01 c0       	rjmp	.+2      	; 0x32fc <vfprintf+0x330>
    32fa:	ee 24       	eor	r14, r14
    32fc:	04 ff       	sbrs	r16, 4
    32fe:	0f c0       	rjmp	.+30     	; 0x331e <vfprintf+0x352>
    3300:	80 e3       	ldi	r24, 0x30	; 48
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	b3 01       	movw	r22, r6
    3306:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <fputc>
    330a:	02 ff       	sbrs	r16, 2
    330c:	1d c0       	rjmp	.+58     	; 0x3348 <vfprintf+0x37c>
    330e:	01 fd       	sbrc	r16, 1
    3310:	03 c0       	rjmp	.+6      	; 0x3318 <vfprintf+0x34c>
    3312:	88 e7       	ldi	r24, 0x78	; 120
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	0e c0       	rjmp	.+28     	; 0x3334 <vfprintf+0x368>
    3318:	88 e5       	ldi	r24, 0x58	; 88
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	0b c0       	rjmp	.+22     	; 0x3334 <vfprintf+0x368>
    331e:	80 2f       	mov	r24, r16
    3320:	86 78       	andi	r24, 0x86	; 134
    3322:	91 f0       	breq	.+36     	; 0x3348 <vfprintf+0x37c>
    3324:	01 ff       	sbrs	r16, 1
    3326:	02 c0       	rjmp	.+4      	; 0x332c <vfprintf+0x360>
    3328:	8b e2       	ldi	r24, 0x2B	; 43
    332a:	01 c0       	rjmp	.+2      	; 0x332e <vfprintf+0x362>
    332c:	80 e2       	ldi	r24, 0x20	; 32
    332e:	f7 fc       	sbrc	r15, 7
    3330:	8d e2       	ldi	r24, 0x2D	; 45
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	b3 01       	movw	r22, r6
    3336:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <fputc>
    333a:	06 c0       	rjmp	.+12     	; 0x3348 <vfprintf+0x37c>
    333c:	80 e3       	ldi	r24, 0x30	; 48
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	b3 01       	movw	r22, r6
    3342:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <fputc>
    3346:	9a 94       	dec	r9
    3348:	d9 14       	cp	r13, r9
    334a:	c0 f3       	brcs	.-16     	; 0x333c <vfprintf+0x370>
    334c:	da 94       	dec	r13
    334e:	f1 01       	movw	r30, r2
    3350:	ed 0d       	add	r30, r13
    3352:	f1 1d       	adc	r31, r1
    3354:	80 81       	ld	r24, Z
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	b3 01       	movw	r22, r6
    335a:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <fputc>
    335e:	dd 20       	and	r13, r13
    3360:	a9 f7       	brne	.-22     	; 0x334c <vfprintf+0x380>
    3362:	06 c0       	rjmp	.+12     	; 0x3370 <vfprintf+0x3a4>
    3364:	80 e2       	ldi	r24, 0x20	; 32
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	b3 01       	movw	r22, r6
    336a:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <fputc>
    336e:	ea 94       	dec	r14
    3370:	ee 20       	and	r14, r14
    3372:	c1 f7       	brne	.-16     	; 0x3364 <vfprintf+0x398>
    3374:	43 ce       	rjmp	.-890    	; 0x2ffc <vfprintf+0x30>
    3376:	f3 01       	movw	r30, r6
    3378:	66 81       	ldd	r22, Z+6	; 0x06
    337a:	77 81       	ldd	r23, Z+7	; 0x07
    337c:	cb 01       	movw	r24, r22
    337e:	2b 96       	adiw	r28, 0x0b	; 11
    3380:	e2 e1       	ldi	r30, 0x12	; 18
    3382:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__epilogue_restores__>

00003386 <strnlen_P>:
    3386:	fc 01       	movw	r30, r24
    3388:	05 90       	lpm	r0, Z+
    338a:	61 50       	subi	r22, 0x01	; 1
    338c:	70 40       	sbci	r23, 0x00	; 0
    338e:	01 10       	cpse	r0, r1
    3390:	d8 f7       	brcc	.-10     	; 0x3388 <strnlen_P+0x2>
    3392:	80 95       	com	r24
    3394:	90 95       	com	r25
    3396:	8e 0f       	add	r24, r30
    3398:	9f 1f       	adc	r25, r31
    339a:	08 95       	ret

0000339c <strnlen>:
    339c:	fc 01       	movw	r30, r24
    339e:	61 50       	subi	r22, 0x01	; 1
    33a0:	70 40       	sbci	r23, 0x00	; 0
    33a2:	01 90       	ld	r0, Z+
    33a4:	01 10       	cpse	r0, r1
    33a6:	d8 f7       	brcc	.-10     	; 0x339e <strnlen+0x2>
    33a8:	80 95       	com	r24
    33aa:	90 95       	com	r25
    33ac:	8e 0f       	add	r24, r30
    33ae:	9f 1f       	adc	r25, r31
    33b0:	08 95       	ret

000033b2 <fputc>:
    33b2:	0f 93       	push	r16
    33b4:	1f 93       	push	r17
    33b6:	cf 93       	push	r28
    33b8:	df 93       	push	r29
    33ba:	8c 01       	movw	r16, r24
    33bc:	eb 01       	movw	r28, r22
    33be:	8b 81       	ldd	r24, Y+3	; 0x03
    33c0:	81 ff       	sbrs	r24, 1
    33c2:	1b c0       	rjmp	.+54     	; 0x33fa <fputc+0x48>
    33c4:	82 ff       	sbrs	r24, 2
    33c6:	0d c0       	rjmp	.+26     	; 0x33e2 <fputc+0x30>
    33c8:	2e 81       	ldd	r18, Y+6	; 0x06
    33ca:	3f 81       	ldd	r19, Y+7	; 0x07
    33cc:	8c 81       	ldd	r24, Y+4	; 0x04
    33ce:	9d 81       	ldd	r25, Y+5	; 0x05
    33d0:	28 17       	cp	r18, r24
    33d2:	39 07       	cpc	r19, r25
    33d4:	64 f4       	brge	.+24     	; 0x33ee <fputc+0x3c>
    33d6:	e8 81       	ld	r30, Y
    33d8:	f9 81       	ldd	r31, Y+1	; 0x01
    33da:	01 93       	st	Z+, r16
    33dc:	f9 83       	std	Y+1, r31	; 0x01
    33de:	e8 83       	st	Y, r30
    33e0:	06 c0       	rjmp	.+12     	; 0x33ee <fputc+0x3c>
    33e2:	e8 85       	ldd	r30, Y+8	; 0x08
    33e4:	f9 85       	ldd	r31, Y+9	; 0x09
    33e6:	80 2f       	mov	r24, r16
    33e8:	09 95       	icall
    33ea:	89 2b       	or	r24, r25
    33ec:	31 f4       	brne	.+12     	; 0x33fa <fputc+0x48>
    33ee:	8e 81       	ldd	r24, Y+6	; 0x06
    33f0:	9f 81       	ldd	r25, Y+7	; 0x07
    33f2:	01 96       	adiw	r24, 0x01	; 1
    33f4:	9f 83       	std	Y+7, r25	; 0x07
    33f6:	8e 83       	std	Y+6, r24	; 0x06
    33f8:	02 c0       	rjmp	.+4      	; 0x33fe <fputc+0x4c>
    33fa:	0f ef       	ldi	r16, 0xFF	; 255
    33fc:	1f ef       	ldi	r17, 0xFF	; 255
    33fe:	c8 01       	movw	r24, r16
    3400:	df 91       	pop	r29
    3402:	cf 91       	pop	r28
    3404:	1f 91       	pop	r17
    3406:	0f 91       	pop	r16
    3408:	08 95       	ret

0000340a <__ultoa_invert>:
    340a:	fa 01       	movw	r30, r20
    340c:	aa 27       	eor	r26, r26
    340e:	28 30       	cpi	r18, 0x08	; 8
    3410:	51 f1       	breq	.+84     	; 0x3466 <__ultoa_invert+0x5c>
    3412:	20 31       	cpi	r18, 0x10	; 16
    3414:	81 f1       	breq	.+96     	; 0x3476 <__ultoa_invert+0x6c>
    3416:	e8 94       	clt
    3418:	6f 93       	push	r22
    341a:	6e 7f       	andi	r22, 0xFE	; 254
    341c:	6e 5f       	subi	r22, 0xFE	; 254
    341e:	7f 4f       	sbci	r23, 0xFF	; 255
    3420:	8f 4f       	sbci	r24, 0xFF	; 255
    3422:	9f 4f       	sbci	r25, 0xFF	; 255
    3424:	af 4f       	sbci	r26, 0xFF	; 255
    3426:	b1 e0       	ldi	r27, 0x01	; 1
    3428:	3e d0       	rcall	.+124    	; 0x34a6 <__ultoa_invert+0x9c>
    342a:	b4 e0       	ldi	r27, 0x04	; 4
    342c:	3c d0       	rcall	.+120    	; 0x34a6 <__ultoa_invert+0x9c>
    342e:	67 0f       	add	r22, r23
    3430:	78 1f       	adc	r23, r24
    3432:	89 1f       	adc	r24, r25
    3434:	9a 1f       	adc	r25, r26
    3436:	a1 1d       	adc	r26, r1
    3438:	68 0f       	add	r22, r24
    343a:	79 1f       	adc	r23, r25
    343c:	8a 1f       	adc	r24, r26
    343e:	91 1d       	adc	r25, r1
    3440:	a1 1d       	adc	r26, r1
    3442:	6a 0f       	add	r22, r26
    3444:	71 1d       	adc	r23, r1
    3446:	81 1d       	adc	r24, r1
    3448:	91 1d       	adc	r25, r1
    344a:	a1 1d       	adc	r26, r1
    344c:	20 d0       	rcall	.+64     	; 0x348e <__ultoa_invert+0x84>
    344e:	09 f4       	brne	.+2      	; 0x3452 <__ultoa_invert+0x48>
    3450:	68 94       	set
    3452:	3f 91       	pop	r19
    3454:	2a e0       	ldi	r18, 0x0A	; 10
    3456:	26 9f       	mul	r18, r22
    3458:	11 24       	eor	r1, r1
    345a:	30 19       	sub	r19, r0
    345c:	30 5d       	subi	r19, 0xD0	; 208
    345e:	31 93       	st	Z+, r19
    3460:	de f6       	brtc	.-74     	; 0x3418 <__ultoa_invert+0xe>
    3462:	cf 01       	movw	r24, r30
    3464:	08 95       	ret
    3466:	46 2f       	mov	r20, r22
    3468:	47 70       	andi	r20, 0x07	; 7
    346a:	40 5d       	subi	r20, 0xD0	; 208
    346c:	41 93       	st	Z+, r20
    346e:	b3 e0       	ldi	r27, 0x03	; 3
    3470:	0f d0       	rcall	.+30     	; 0x3490 <__ultoa_invert+0x86>
    3472:	c9 f7       	brne	.-14     	; 0x3466 <__ultoa_invert+0x5c>
    3474:	f6 cf       	rjmp	.-20     	; 0x3462 <__ultoa_invert+0x58>
    3476:	46 2f       	mov	r20, r22
    3478:	4f 70       	andi	r20, 0x0F	; 15
    347a:	40 5d       	subi	r20, 0xD0	; 208
    347c:	4a 33       	cpi	r20, 0x3A	; 58
    347e:	18 f0       	brcs	.+6      	; 0x3486 <__ultoa_invert+0x7c>
    3480:	49 5d       	subi	r20, 0xD9	; 217
    3482:	31 fd       	sbrc	r19, 1
    3484:	40 52       	subi	r20, 0x20	; 32
    3486:	41 93       	st	Z+, r20
    3488:	02 d0       	rcall	.+4      	; 0x348e <__ultoa_invert+0x84>
    348a:	a9 f7       	brne	.-22     	; 0x3476 <__ultoa_invert+0x6c>
    348c:	ea cf       	rjmp	.-44     	; 0x3462 <__ultoa_invert+0x58>
    348e:	b4 e0       	ldi	r27, 0x04	; 4
    3490:	a6 95       	lsr	r26
    3492:	97 95       	ror	r25
    3494:	87 95       	ror	r24
    3496:	77 95       	ror	r23
    3498:	67 95       	ror	r22
    349a:	ba 95       	dec	r27
    349c:	c9 f7       	brne	.-14     	; 0x3490 <__ultoa_invert+0x86>
    349e:	00 97       	sbiw	r24, 0x00	; 0
    34a0:	61 05       	cpc	r22, r1
    34a2:	71 05       	cpc	r23, r1
    34a4:	08 95       	ret
    34a6:	9b 01       	movw	r18, r22
    34a8:	ac 01       	movw	r20, r24
    34aa:	0a 2e       	mov	r0, r26
    34ac:	06 94       	lsr	r0
    34ae:	57 95       	ror	r21
    34b0:	47 95       	ror	r20
    34b2:	37 95       	ror	r19
    34b4:	27 95       	ror	r18
    34b6:	ba 95       	dec	r27
    34b8:	c9 f7       	brne	.-14     	; 0x34ac <__ultoa_invert+0xa2>
    34ba:	62 0f       	add	r22, r18
    34bc:	73 1f       	adc	r23, r19
    34be:	84 1f       	adc	r24, r20
    34c0:	95 1f       	adc	r25, r21
    34c2:	a0 1d       	adc	r26, r0
    34c4:	08 95       	ret

000034c6 <_exit>:
    34c6:	f8 94       	cli

000034c8 <__stop_program>:
    34c8:	ff cf       	rjmp	.-2      	; 0x34c8 <__stop_program>
